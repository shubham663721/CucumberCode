package Page;

import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.omg.PortableServer.THREAD_POLICY_ID;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import MyCommonObject.CommonPage;
import Selenium.ScreenShotUtility;
import Selenium.SetUp;

import Utility.Excel_Utility;
import Utility.Property_Utility;
import Utility.ReuseableMethod;
import Utility.TestUtil;
import cucumber.api.java.en.Then;

public class Nyl_CoveragePage extends SetUp {

	// public WebDriver driver = null;
	private final Logger log = LogManager.getLogger(Nyl_CoveragePage.class.getName());

	public Nyl_CoveragePage() {
		driver = getDriver();
		PageFactory.initElements(new AjaxElementLocatorFactory(driver, 10), this);
	}

	ReuseableMethod reuseMethod = new ReuseableMethod();
	ScreenShotUtility screenShotUtility = new ScreenShotUtility();
	Property_Utility PropertyUtility =new Property_Utility();

	@FindBy(id = "covg_LITenYr_Slf_rdTypeOfCovg-0")
	WebElement acs_CoverageNewTenYTL;

	@FindBy(id = "back")
	WebElement Previous;

	@FindBy(id = "cancel")
	WebElement Cancel;

	@FindBy(id = "saveForLater")
	WebElement SaveForLater;

	@FindBy(id = "next")
	WebElement Next;

	@FindBy(xpath = "//div[@class='slider-handle min-slider-handle']")
	WebElement Slider;

	@FindBy(id = "rdRiderOnlySlf-0")
	WebElement selfRiderOnlyYes;

	@FindBy(id = "rdRiderOnlySlf-1")
	WebElement selfRiderOnlyNo;

	@FindBy(id = "ciradioself1")
	WebElement SelfRiderYes;

	@FindBy(id = "ciradioself2")
	WebElement SelfRiderNo;

	@FindBy(id = "rdRiderOnlySps-0")
	WebElement spouseRiderOnlyYes;

	@FindBy(id = "rdRiderOnlySps-1")
	WebElement spouseRiderOnlyNo;

	@FindBy(xpath ="//label[text()='Request Coverage']")
	WebElement RequestCoveragePage;
	
	@FindBy(xpath ="//div[@data-fields='lblLIFiveYr']//span[@class='lblLIFiveYr']")
	WebElement MaxAggregate_FiveYr;
	
	@FindBy(xpath ="//div[@data-fields='lblLITenYr']//span[@class='lblLITenYr']")
	WebElement MaxAggregate_TenYr;
	
	@FindBy(xpath ="//div[@data-fields='lblLITwentyYr']//span[@class='lblLITwentyYr']")
	WebElement MaxAggregate_TwentyYr;
	
	
	
	
	
	@FindBy(id="covg_DIGrpDisable_Slf_txtMaxBenefitAmt")
	WebElement MaxBenefitAmount_DII;
	
	@FindBy(xpath = "//input[@id='rider_DIGrpDisable_chk_cat_Slf']")
	WebElement Rider_Catastrophic_DII;

	@FindBy(xpath = "//input[@id='rider_DIGrpDisable_chk_cola_Slf']")
	WebElement Rider_COLA_DII;
	
	@FindBy(xpath ="//div[@class='row MA-0 field-rider_DIGrpDisable_widget_cat_Slf']//i")
	WebElement RiderMessage;
	
	
	
	@FindBy(xpath ="//span[@class='alert-txt']")
	WebElement CoverageErrorMsg;
	
	@FindBy(xpath ="//div[@id='page-spouse']//div[@class='info']/label[1]")
	WebElement CoveragenotificationMsgSpouse1;
	
	@FindBy(xpath ="//div[@id='page-spouse']//div[@class='info']/label[2]")
	WebElement CoveragenotificationMsgSpouse2;
	
	@FindBy(id ="covg_LIAnnual_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_Traditional;
	
	@FindBy(id ="covg_LIAnnual_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_Traditional;
	
	@FindBy(id ="covg_LIAnnual_Sps_rdTypeOfCovg-0")
	WebElement newCoverageSpouse_Traditional;
	
	@FindBy(id ="covg_LIAnnual_Sps_rdTypeOfCovg-1")
	WebElement changeCoverageSpouse_Traditional;
	
	@FindBy(id ="covg_LITenYr_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_Ten;
	
	@FindBy(id ="covg_LITenYr_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_Ten;
	
	@FindBy(id ="covg_LITenYr_Sps_rdTypeOfCovg-0")
	WebElement newCoverageSpouse_Ten;
	
	@FindBy(id ="covg_LITenYr_Sps_rdTypeOfCovg-1")
	WebElement changeCoverageSpouse_Ten;
	
	@FindBy(id ="covg_LIFifteenYr_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_Fifteen;
	
	@FindBy(id ="covg_LIFifteenYr_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_Fifteen;
	
	@FindBy(id ="covg_LIFifteenYr_Sps_rdTypeOfCovg-0")
	WebElement newCoverageSpouse_Fifteen;
	
	@FindBy(id ="covg_LIFifteenYr_Sps_rdTypeOfCovg-1")
	WebElement changeCoverageSpouse_Fifteen;
	
	@FindBy(id ="covg_LITwentyYr_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_Twenty;
	
	@FindBy(id ="covg_LITwentyYr_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_Twenty;
	
	@FindBy(id ="covg_LITwentyYr_Sps_rdTypeOfCovg-0")
	WebElement newCoverageSpouse_Twenty;
	
	@FindBy(id ="covg_LITwentyYr_Sps_rdTypeOfCovg-1")
	WebElement changeCoverageSpouse_Twenty;
	
	@FindBy(id ="covg_AccdntDeath_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_AdnD;
	
	@FindBy(id ="covg_AccdntDeath_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_AdnD;
	
	@FindBy(id ="covg_AccdntDeath2_Sps_rdTypeOfCovg-0")
	WebElement newCoverageSpouse_AdnD;
	
	@FindBy(id ="covg_AccdntDeath2_Sps_rdTypeOfCovg-1")
	WebElement changeCoverageSpouse_AdnD;
	
	@FindBy(id ="covg_DILong_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_LTD;
	
	@FindBy(id ="covg_DILong_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_LTD;
	
	@FindBy(id ="covg_DIShort3_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_STD;
	
	@FindBy(id ="covg_DIShort3_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_STD;
	

	@FindBy(id ="covg_GrpOffOvr_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_OO;
	
	@FindBy(id ="covg_GrpOffOvr_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_OO;
	
	@FindBy(id ="covg_DILong25_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_SDI;
	
	@FindBy(id ="covg_DILong25_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_SDI;
	
	@FindBy(id ="covg_HospitalIndem_Slf_rdTypeOfCovg-0")
	WebElement newCoverageSelf_HII;
	
	@FindBy(id ="covg_HospitalIndem_Slf_rdTypeOfCovg-1")
	WebElement changeCoverageSelf_HII;
	
	@FindBy(id ="covg_HospitalIndem_Sps_rdTypeOfCovg-0")
	WebElement newCoverageSpouse_HII;
	
	@FindBy(id ="covg_HospitalIndem_Sps_rdTypeOfCovg-1")
	WebElement changeCoverageSpouse_HII;
	
	@FindBy(id ="covg_HospitalIndem_Chd_rdTypeOfCovg-0")
	WebElement newCoverageChild_HII;
	
	@FindBy(id ="covg_HospitalIndem_Chd_rdTypeOfCovg-1")
	WebElement changeCoverageChild_HII;
	
	/****************** Benefit amount for Five Year Products *******************/

	/*---------------------------Self----------------------*/

	@FindBy(xpath = "//span[@id='covg_LIFiveYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_FiveYrProduct;

	@FindBy(xpath = "//span[@id='covg_LIFiveYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_FiveYrProduct;

	@FindBy(id = "covg_LIFiveYr_Chd_selBenefitAmt")
	WebElement BenefitAmount_Child_FiveYrProduct;

	@FindBy(id = "covg_LIFiveYr_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmount5Yr;

	@FindBy(id = "covg_LIFiveYr_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_FiveYrSelf;

	@FindBy(id = "covg_LIFiveYr_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_FiveYrSelf;

	@FindBy(xpath = "//input[@id='rider_LIFiveYr_chk_ccr_Slf']")
	WebElement ChronicRider_FiveYrSelf;
	

	/*-------------------Spouse-------------------------------*/
	@FindBy(id = "covg_LIFiveYr_Sps_slidBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmount5Yr;

	@FindBy(xpath = "//span[@id='covg_LIFiveYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_FiveYrProduct;

	@FindBy(xpath = "//span[@id='covg_LIFiveYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_FiveYrProduct;

	@FindBy(id = "covg_LIFiveYr_Sps_slidBenefitAmt-minLabel")
	WebElement MinAmount_FiveYrSpouse;

	
	@FindBy(id="covg_LIFiveYr_Sps_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_FiveYrSpouse; 
	
	@FindBy(xpath="//input[@id='rider_LIFiveYr_chk_ccr_Sps']")
	WebElement ChronicRider_FiveYrSpouse;

	@FindBy(id="covg_DILong1_Sps_txtBenefitAmt")
	WebElement BenefitAmnt_SpouseLTD;
	
	@FindBy(xpath="//ul[@id='rdEligIsMemberSps']//following-sibling::div[contains(@class,'error')]")
	WebElement Validation_SpouseMember_EligibilityPage_Spouse;
	
	/*------------Child--------------------------*/

	@FindBy(id = "covg_LIFiveYr_Chd_selBenefitAmt")
	WebElement BenefitAmount_Child_5YrProduct;
	
	//WAEPA-For disablr child drop down
	@FindBy(xpath = "//select[@id='covg_LIFiveYr_Chd_selBenefitAmt' and @disabled]")
	WebElement BenefitAmount_Child_5YrProduct_Disabled;
	/*****************
	 * Benefit amount for Ten Year Products
	 ************************************/

	/*---------------------------Self----------------------*/

	@FindBy(id = "covg_LITenYr_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmount10Yr;

	@FindBy(xpath = "//span[@id='covg_LITenYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_TenYrProduct;

	@FindBy(xpath = "//span[@id='covg_LITenYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_TenYrProduct;

	@FindBy(id = "covg_LITenYr_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_TenYrSelf;

	@FindBy(id = "covg_LITenYr_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_TenYrSelf;

	@FindBy(xpath = "//input[@id='rider_LITenYr_chk_wop_Slf']")
	WebElement Rider_TenYrSelf;
	
	

	/*---------------------------Spouse -----------------------------*/

	@FindBy(id = "covg_LITenYr_Sps_slidBenefitAmt-sliderLabel")	
	WebElement abeSpouseBenefitAmount10Yr;

	@FindBy(xpath = "//span[@id='covg_LITenYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_TenYrProduct;

	@FindBy(xpath = "//span[@id='covg_LITenYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_TenYrProduct;

	@FindBy(id = "covg_LITenYr_Sps_slidBenefitAmt-minLabel")
	WebElement MinAmount_TenYrSpouse;

	@FindBy(id = "covg_LITenYr_Sps_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_TenYrSpouse;

	@FindBy(xpath = "//input[@id='rider_LITenYr_chk_wop_Sps']")
	WebElement Rider_TenYrSpouse;

	/*------------Child--------------------------*/
	@FindBy(id = "covg_LITenYr_Chd_selBenefitAmt")
	WebElement BenefitAmount_Child_10YrProduct;

	/*****************
	 * Benefit amount for Twenty Year Products
	 ************************************/

	/*---------------------------Self----------------------*/

	@FindBy(id = "covg_LITwentyYr_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmount20Yr;

	@FindBy(id = "covg_LIFifteenYr_Slf_slidBenefitAmt-sliderLabel")
	WebElement SelfBenefitAmount15Yr;
	
	
	@FindBy(id = "covg_LITwentyYr_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_TwentyYrSelf;

	@FindBy(id = "covg_LITwentyYr_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_TwentyYrSelf;

	@FindBy(xpath = "//span[@id='covg_LITwentyYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_TwentyYrProduct;

	@FindBy(xpath = "//span[@id='covg_LITwentyYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_TwentyYrProduct;
	
	@FindBy(xpath = "//span[@id='covg_LIFifteenYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_FifteenYrProduct;
	
	@FindBy(xpath = "//span[@id='covg_LIFifteenYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_FifteenYrProduct;

	@FindBy(xpath = "//input[@id='rider_LITwentyYr_chk_wop_Slf']")
	WebElement Rider_TwentyYrSelf;
	
	@FindBy(xpath = "//span[@id='rider_DILong_widget_fpo_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_LTDFPO;
	
	@FindBy(xpath = "//span[@id='rider_DILong_widget_fpo_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_LTDFPO;

	/*-------------------Spouse----------------------------*/

	@FindBy(id = "covg_LITwentyYr_Sps_slidBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmount20Yr;
	
	@FindBy(id = "covg_LIFifteenYr_Sps_slidBenefitAmt-sliderLabel")
	WebElement spouseBenefitAmount15Yr;

	@FindBy(id = "covg_AccdntDeath2_Sps_selBenefitAmt")
	WebElement spouseBenefitAmount_ADnD;
	
	@FindBy(id = "covg_LITwentyYr_Sps_slidBenefitAmt-minLabel")
	WebElement MinAmount_TwentyYrSpouse;

	@FindBy(id = "covg_LITwentyYr_Sps_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_TwentyYrSpouse;

	@FindBy(xpath = "//span[@id='covg_LITwentyYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_TwentyYrProduct;

	@FindBy(xpath = "//span[@id='covg_LITwentyYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_TwentyYrProduct;
	
	@FindBy(xpath = "//span[@id='covg_LIFifteenYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_FifteenYrProduct;
	
	@FindBy(xpath = "//span[@id='covg_LIFifteenYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_FifteenYrProduct;
	
	@FindBy(xpath = "//input[@id='rider_LITwentyYr_chk_wop_Sps']")
	WebElement Rider_TwentyYrSpouse;

	/*----------Child-------------*/

	@FindBy(id = "covg_LITwentyYr_Chd_selBenefitAmt")
	WebElement BenefitAmount_Child_20YrProduct;
	
	@FindBy(xpath = "//select[@id='covg_LITwentyYr_Chd_selBenefitAmt']//parent::div")
	WebElement BenefitAmount_Child_20YrProduct_label;
	
	@FindBy(id = "covg_LIFifteenYr_Chd_selBenefitAmt")
	WebElement BenefitAmount_Child_15YrProduct;
	

	/*****************
	 * Benefit amount for Fifty Year Products
	 ************************************/

	/****************** Self ******************************/

	@FindBy(id = "covg_LIFiftyYr_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmount50Yr;

	@FindBy(id = "covg_LIFiftyYr_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_FiftyYrSelf;

	@FindBy(id = "covg_LIFiftyYr_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_FiftyYrSelf;

	@FindBy(xpath = "//span[@id='covg_LIFiftyYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_FiftyYrProduct;

	@FindBy(xpath = "//span[@id='covg_LIFiftyYr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_FiftyYrProduct;

	/*----------------Spouse----------------------*/

	@FindBy(id = "covg_LIFiftyYr_Sps_slidBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmount50Yr;

	@FindBy(id = "covg_LIFiftyYr_Sps_slidBenefitAmt-minLabel")
	WebElement MinAmount_FiftyYrSpouse;

	@FindBy(id = "covg_LIFiftyYr_Sps_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_FiftyYrSpouse;

	@FindBy(xpath = "//span[@id='covg_LIFiftyYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_FiftyYrProduct;

	@FindBy(xpath = "//span[@id='covg_LIFiftyYr_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_FiftyYrProduct;

	/*****************
	 * Benefit amount for Accidental Death Products
	 ************************************/

	/****************** Self ******************************/

	@FindBy(id = "covg_AccdntDeath_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountAccidentalProduct;

	@FindBy(id = "covg_AccdntDeath_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_ACCSelf;

	@FindBy(id = "covg_AccdntDeath_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_ACCSelf;

	@FindBy(xpath = "//span[@id='covg_AccdntDeath_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_AccidentalProduct;

	@FindBy(xpath = "//span[@id='covg_AccdntDeath_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_AccidentalProduct;

	///////////////////////////////////////////// Spouse/////////////////////////////////

	@FindBy(id = "covg_AccdntDeath_Sps_slidBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmountAccidentalProduct;

	@FindBy(xpath = "//span[@id='covg_AccdntDeath_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_AccidentalProduct;

	@FindBy(xpath = "//span[@id='covg_AccdntDeath_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_AccidentalProduct;

	@FindBy(id = "covg_AccdntDeath_Chd_selBenefitAmt")
	WebElement BenefitAmount_Child_AccidentalProduct;

	@FindBy(id = "covg_AccdntDeath_Sps_slidBenefitAmt-minLabel")
	WebElement MinAmount_ACCSpouse;

	@FindBy(id = "covg_AccdntDeath_Sps_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_ACCSpouse;

	/*****************
	 * Benefit amount for Long term Disability Plus Products
	 ************************************/

	/****************** Self ******************************/

	@FindBy(id = "covg_DILongPlus_Slf_slidMonBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountLTDPProduct;

	@FindBy(id = "covg_DILongPlus_Slf_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_LTDPSelf;

	@FindBy(id = "covg_DILongPlus_Slf_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_LTDPSelf;

	@FindBy(xpath = "//span[@id='covg_DILongPlus_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_LTDPProduct;

	@FindBy(xpath = "//span[@id='covg_DILongPlus_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_LTDPProduct;

	@FindBy(id = "covg_DILongPlus_Slf_selWaitingPeriod")
	WebElement WaitingPeriod_LTDP;

	@FindBy(xpath = "//input[@id='rider_DILongPlus_chk_catstrophicDisBft_Slf']")
	WebElement Rider_Catastrophic;

	@FindBy(xpath = "//input[@id='rider_DILongPlus_chk_cola_Slf']")
	WebElement Rider_COLA_LTDP;

	//////////////////////////////////////// Spouse/////////////////////////

	@FindBy(id = "covg_DILongPlus_Sps_slidMonBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmountLTDPProduct;

	@FindBy(id = "covg_DILongPlus_Sps_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_LTDPSpouse;

	@FindBy(id = "covg_DILongPlus_Sps_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_LTDPSpouse;

	@FindBy(xpath = "//span[@id='covg_DILongPlus_Sps_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_LTDPProduct;

	@FindBy(xpath = "//span[@id='covg_DILongPlus_Sps_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_LTDPProduct;

	@FindBy(id = "covg_DILongPlus_Sps_selWaitingPeriod")
	WebElement WaitingPeriodSpouse_LTDP;

	@FindBy(xpath = "//input[@id='rider_DILongPlus_chk_catstrophicDisBft_Sps']")
	WebElement Rider_Catastrophic_Spouse;

	@FindBy(xpath = "//input[@id='rider_DILongPlus_chk_cola_Sps']")
	WebElement Rider_COLA_LTDP_Spouse;

	/*****************
	 * Benefit amount for Long term Disability Products
	 ************************************/

	/****************** Self ******************************/

	@FindBy(id = "covg_DILong_Slf_slidMonBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountLTDProduct;

	@FindBy(id = "covg_DILong_Slf_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_LTDSelf;

	@FindBy(id = "covg_DILong_Slf_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_LTDSelf;

	@FindBy(xpath = "//span[@id='covg_DILong_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_LTDProduct;

	@FindBy(xpath = "//span[@id='covg_DILong_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_LTDProduct;

	@FindBy(id = "covg_DILong_Slf_selWaitingPeriod")
	WebElement WaitingPeriod_LTD;

	@FindBy(xpath = "//input[@id='rider_DILong_chk_cola_Slf']")
	WebElement Rider_COLA_Self_LTD;
	
	@FindBy(xpath = "//input[@id='rider_DILong_chk_fpo_Slf']")
	WebElement FPO_Self_LTD;
	
	@FindBy(id = "rider_DILong_widget_fpo_Slf_slidBenefitAmt-sliderLabel")
	WebElement FPO_Self_SliderAmntLTD;
	
	//////////// Spouse/////////////////////////////////

	@FindBy(id = "covg_DILong_Sps_slidMonBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmountLTDProduct;

	@FindBy(id = "covg_DILong_Sps_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_LTDSpouse;

	@FindBy(id = "covg_DILong_Sps_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_LTDSpouse;

	@FindBy(xpath = "//span[@id='covg_DILong_Sps_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_LTDProduct;

	@FindBy(xpath = "//span[@id='covg_DILong_Sps_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_LTDProduct;

	@FindBy(id = "covg_DILong_Sps_selWaitingPeriod")
	WebElement WaitingPeriodSpouse_LTD;

	@FindBy(xpath = "//input[@id='rider_DILong_chk_cola_Sps']")
	WebElement Rider_COLA_LTD_Spouse;

	/*****************
	 * Benefit amount for Mid Term Disability Products
	 ************************************/

	/****************** Self ******************************/

	@FindBy(id = "covg_DIShort_Slf_slidMonBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountMIDProduct;
	
	@FindBy(id = "covg_DIShort3_Slf_slidBenefitAmt-sliderLabel")
	WebElement SelfBenefitAmountSTDProduct;

	@FindBy(id = "covg_DIShort_Slf_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_MIDSelf;
	
	@FindBy(id = "covg_DIShort3_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_STDSelf;

	@FindBy(id = "covg_DIShort_Slf_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_MIDSelf;
	
	@FindBy(id = "covg_DIShort_Slf_selWaitingPeriod")
	WebElement WaitingPeriod_MID;
	
	@FindBy(id = "covg_DIShort3_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_STDSelf;

	@FindBy(id = "covg_DIShort3_Slf_slidBenefitAmt-sliderLabel")
	WebElement SelfBenefitAmount_STDProduct;
	
	@FindBy(xpath = "//span[@id='covg_DIShort_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_MIDProduct;

	@FindBy(xpath = "//span[@id='covg_DIShort_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_MIDProduct;

	@FindBy(xpath = "//span[@id='covg_DIShort3_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_STDProduct;
	
	@FindBy(xpath = "//span[@id='covg_DIShort3_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_STDProduct;
	
	@FindBy(id ="covg_DIShort3_Slf_selWaitingPeriod")
	WebElement WaitingPrd_Self_STD;
	
	@FindBy(id ="covg_DIShort3_Slf_selBenefitDuration")
	WebElement BenefitDur_Self_STD;

	///////////////// Spouse//////////////////////////////////////

	@FindBy(id = "covg_DIShort_Sps_slidMonBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmountMIDProduct;

	@FindBy(id = "covg_DIShort_Sps_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_MIDSpouse;

	@FindBy(id = "covg_DIShort_Sps_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_MIDSpouse;

	@FindBy(xpath = "//span[@id='covg_DIShort_Sps_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_MIDProduct;

	@FindBy(xpath = "//span[@id='covg_DIShort_Sps_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_MIDProduct;

	@FindBy(id = "covg_DIShort_Sps_selWaitingPeriod")
	WebElement WaitingPeriod_MID_Spouse;

	/*****************
	 * Benefit amount for Retirement Disability Products
	 ************************************/

	/****************** Self ******************************/

	@FindBy(id = "covg_DIRetirement_Slf_slidMonBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountRetireProduct;

	@FindBy(id = "covg_DIRetirement_Slf_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_RetireSelf;

	@FindBy(id = "covg_DIRetirement_Slf_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_RetireSelf;

	@FindBy(xpath = "//span[@id='covg_DIRetirement_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_RetireProduct;

	@FindBy(xpath = "//span[@id='covg_DIRetirement_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_RetireProduct;

	@FindBy(id = "covg_DIRetirement_Slf_selWaitingPeriod")
	WebElement WaitingPeriod_Retire;

	/*****************
	 * Benefit amount for Professional Overhead Expenses Disability Products
	 ************************************/

	/****************** Self ******************************/

	@FindBy(id = "covg_GrpOffOvr_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountProfProduct;

	@FindBy(id = "covg_GrpOffOvr_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_ProfSelf;

	@FindBy(id = "covg_GrpOffOvr_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_ProfSelf;

	@FindBy(xpath = "//span[@id='covg_GrpOffOvr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_ProfProduct;

	@FindBy(xpath = "//span[@id='covg_GrpOffOvr_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_ProfProduct;
	
	@FindBy(xpath = "//select[@id='covg_GrpOffOvr_Slf_selWaitingPeriod']//parent::div")
	WebElement waitPrd_OOEDISelf;
	
	@FindBy(xpath = "//select[@id='covg_GrpOffOvr_Slf_selBenefitDuration']//parent::div")
	WebElement BeneDuration_OOEDISelf;
	

	/*****************
	 * Benefit amount for Critical Illness Products
	 ************************************/

	/*-----------------------Self-----------------------*/

	@FindBy(id = "covg_CICriticalIllness_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountCIProduct;

	@FindBy(id = "covg_CICriticalIllness_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_CISelf;

	@FindBy(id = "covg_CICriticalIllness_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_CISelf;

	@FindBy(xpath = "//span[@id='covg_CICriticalIllness_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_CIProduct;

	@FindBy(xpath = "//span[@id='covg_CICriticalIllness_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_CIProduct;

	/*--------------------Spouse----------------------------*/

	@FindBy(id = "covg_CICriticalIllness_Sps_slidBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmountCIProduct;

	@FindBy(id = "covg_CICriticalIllness_Sps_slidBenefitAmt-minLabel")
	WebElement MinAmount_CISpouse;

	@FindBy(id = "covg_CICriticalIllness_Sps_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_CISpouse;

	@FindBy(xpath = "//span[@id='covg_CICriticalIllness_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_CIProduct;

	@FindBy(xpath = "//span[@id='covg_CICriticalIllness_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_CIProduct;

	/*****************
	 * Benefit amount for Hospital Money Insurance Products
	 ************************************/

	@FindBy(id = "covg_HospitalIndem_Slf_selDailyBenefitAmt")
	WebElement BenefitAmount_Self_HMI;

	@FindBy(id = "rider_HospitalIndem_chk_sa_Slf")
	WebElement Surgical_Rider;

	@FindBy(id = "rider_HospitalIndem_sel_sa_Slf")
	WebElement Surgical_Amount;

	@FindBy(id = "covg_HospitalIndem_Chd_selDailyBenefitAmt")
	WebElement BenefitAmount_Child_HospitalMoneyProduct;

	@FindBy(id = "covg_HospitalIndem_Sps_selDailyBenefitAmt")
	WebElement BenefitAmount_Spouse_HMI;
	
	
	
	
	/****************** Benefit amount for Term Life Insurance Products *******************/

	/*---------------------------Self----------------------*/
	
	@FindBy(xpath = "//span[@id='covg_LIAnnual_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_TermLifeProduct;

	@FindBy(xpath = "//span[@id='covg_LIAnnual_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_TermLifeProduct;

	@FindBy(id = "covg_LIAnnual_Slf_slidBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountTermLife;

	@FindBy(id = "covg_LIAnnual_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_TermLifeSelf;

	@FindBy(id = "covg_LIAnnual_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_TermLifeSelf;

	@FindBy(xpath = "//input[@id='rider_LIAnnual_chk_ccr_Slf']")
	WebElement ChronicRider_TermLifeSelf;
	
	/*----------Rider----------------------*/
	
	@FindBy(xpath = "//span[@id='rider_LIAnnual_widget_ccr_Slf_slidPortionLICCR-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_TermLifeProductRider;

	@FindBy(xpath = "//span[@id='rider_LIAnnual_widget_ccr_Slf_slidPortionLICCR-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_TermLifeProductRider;

	@FindBy(id = "rider_LIAnnual_widget_ccr_Slf_slidPortionLICCR-sliderLabel")
	WebElement abeSelfBenefitAmountTermLifeRider;

	@FindBy(id = "rider_LIAnnual_widget_ccr_Slf_slidPortionLICCR-minLabel")
	WebElement MinAmount_TermLifeSelfRider;

	@FindBy(id = "rider_LIAnnual_widget_ccr_Slf_slidPortionLICCR-maxLabel")
	WebElement MaxAmount_TermLifeSelfRider;
	
	@FindBy(id = "covg_LIFifteenYr_Slf_slidBenefitAmt-minLabel")
	WebElement FifteenMin_AmntSelf;
	
	@FindBy(id = "covg_LIFifteenYr_Slf_slidBenefitAmt-maxLabel")
	WebElement FifteenMax_AmntSelf;
	
	
	@FindBy(id = "rider_LIAnnual_widget_adnd_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_TermLifeSelf_ADnDRider;
	
	@FindBy(id = "rider_LIAnnual_widget_adnd_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_TermLifeSelf_ADnDRider;
	
	/*-------------------Spouse-------------------------------*/
	
	@FindBy(id = "covg_LIAnnual_Sps_slidBenefitAmt-sliderLabel")
	WebElement abeSpouseBenefitAmountTermLife;

	@FindBy(xpath = "//span[@id='covg_LIAnnual_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_TermLifeProduct;

	@FindBy(xpath = "//span[@id='covg_LIAnnual_Sps_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_TermLifeProduct;

	@FindBy(id = "covg_LIAnnual_Sps_slidBenefitAmt-minLabel")
	WebElement MinAmount_TermLifeSpouse;

	@FindBy(id="covg_LIAnnual_Sps_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_TermLifeSpouse; 
	
	@FindBy(xpath="//input[@id='rider_LIAnnual_chk_ccr_Sps']")
	WebElement ChronicRider_TermLifeSpouse;
	
	@FindBy(id = "covg_LIFifteenYr_Sps_slidBenefitAmt-minLabel")
	WebElement FifteenMin_AmntSpouse;
	
	@FindBy(id = "covg_LIFifteenYr_Sps_slidBenefitAmt-maxLabel")
	WebElement FifteenMax_AmntSpouse;
				/*----------Rider----------------------*/
	
	@FindBy(xpath = "//span[@id='rider_LIAnnual_widget_ccr_Sps_slidPortionLICCR-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Spouse_TermLifeProductRider;

	@FindBy(xpath = "//span[@id='rider_LIAnnual_widget_ccr_Sps_slidPortionLICCR-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Spouse_TermLifeProductRider;

	@FindBy(id = "rider_LIAnnual_widget_ccr_Sps_slidPortionLICCR-sliderLabel")
	WebElement abeSpouseBenefitAmountTermLifeRider;

	@FindBy(id = "rider_LIAnnual_widget_ccr_Sps_slidPortionLICCR-minLabel")
	WebElement MinAmount_TermLifeSpouseRider;

	@FindBy(id = "rider_LIAnnual_widget_ccr_Sps_slidPortionLICCR-maxLabel")
	WebElement MaxAmount_TermLifeSpouseRider;

	/*------------Child--------------------------*/

	@FindBy(xpath = "//select[@id='covg_LIAnnual_Chd_selBenefitAmt']")
	WebElement BenefitAmountChildTermLifeProduct;
	
	@FindBy(xpath = "//select[@id='covg_LIAnnual_Chd_selBenefitAmt']//parent::div")
	WebElement BenefitAmountChildTermLifeProduct_Label;
	
	@FindBy(xpath = "//select[@id='covg_LITenYr_Chd_selBenefitAmt']//parent::div")
	WebElement BenefitAmountChild_TenYTL_Label;
	
	//AAFP*********TermLifeInsurance**************
	
//Spouse
	@FindBy(xpath = "//span[@id='covg_LIAnnual_Sps_slidBenefitAmt-sliderLabel']/parent::div/div[@id='upArrow']")
	WebElement TermLifeProduct_upArrow_Spouse;

	@FindBy(xpath = "//span[@id='covg_LIAnnual_Sps_slidBenefitAmt-sliderLabel']/parent::div/div[@id='downArrow']")
	WebElement TermLifeProduct_downArrow_Spouse;

	@FindBy(xpath = "//span[@id='covg_LIAnnual_Sps_slidBenefitAmt-sliderLabel']")
	WebElement TermLifeProduct_BenefitAmt_Spouse;
	
	//********************TermLifeInsurance********AD&DRiderBenefit*********************
	
	
	@FindBy(xpath = "//span[@id='rider_LIAnnual_widget_adnd_Slf_slidBenefitAmt-sliderLabel']/parent::div/div[@id='upArrow']")
	WebElement TermLifeProduct_upArrow_ADDRider_Self;

	@FindBy(xpath = "//span[@id='rider_LIAnnual_widget_adnd_Slf_slidBenefitAmt-sliderLabel']/parent::div/div[@id='downArrow']")
	WebElement TermLifeProduct_downArrow_ADDRider_Self;

	@FindBy(xpath = "//span[@id='rider_LIAnnual_widget_adnd_Slf_slidBenefitAmt-sliderLabel']")
	WebElement TermLifeProduct_BenefitAmt_ADDRider_Self;
	
	//AAFP ADDRider
	@FindBy(xpath="//input[@id='rider_LIAnnual_chk_adnd_Slf']")
	WebElement TermLifeProduct_ADDRider_ChkBox_Self;
	
//Child
	@FindBy(id = "covg_LIAnnual_Chd_selBenefitAmt")
	WebElement TermLifeProduct_BenefitAmt_Child;
	
	//WOP Rider
	
	@FindBy(xpath="//input[@id='rider_LIAnnual_chk_wop_Slf']")
	WebElement TermLifeProduct_WOPRider_ChkBox_Self;
	
	/****************** Practice Overhead Products *******************/
	@FindBy(id = "covg_GrpOffOvr_Slf_selWaitingPeriod")
	WebElement PracticeOverhead_WaitingPeriod_Self;
	
	
	
	/****************** Benefit amount for Disability Income Insurance Products *******************/
	
	@FindBy(id = "covg_DIGrpDisable_Slf_selWaitingPeriod")
	WebElement WaitingPeriodDII_Self;
	
	@FindBy(xpath = "//span[@id='covg_DIGrpDisable_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_DII;

	@FindBy(xpath = "//span[@id='covg_DIGrpDisable_Slf_slidMonBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_DII;

	@FindBy(id = "covg_DIGrpDisable_Slf_slidMonBenefitAmt-sliderLabel")
	WebElement abeSelfBenefitAmountDII;

	@FindBy(id = "covg_DIGrpDisable_Slf_slidMonBenefitAmt-minLabel")
	WebElement MinAmount_DIISelf;

	@FindBy(id = "covg_DIGrpDisable_Slf_slidMonBenefitAmt-maxLabel")
	WebElement MaxAmount_DIISelf;
	
	@FindBy(id = "covg_DIGrpDisable_Slf_selBenefitOption")
	WebElement BenefitOptionDII_Self;
	
	
	/*---------------  Catastrophic Disability Benefit Rider under DII ----------------*/
	
	@FindBy(xpath = "//span[@id='rider_DIGrpDisable_widget_cat_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_DIIRider;

	@FindBy(xpath = "//span[@id='rider_DIGrpDisable_widget_cat_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_DIIRider;

	@FindBy(id = "rider_DIGrpDisable_widget_cat_Slf_slidBenefitAmt-sliderLabel")
	WebElement SelfBenefitAmountDII_Rider;

	@FindBy(id = "rider_DIGrpDisable_widget_cat_Slf_slidBenefitAmt-minLabel")
	WebElement MinAmount_DIISelfRider;

	@FindBy(id = "rider_DIGrpDisable_widget_cat_Slf_slidBenefitAmt-maxLabel")
	WebElement MaxAmount_DIISelfRider;


	/****************** Supplemental Disability Insurance Products *******************/

	@FindBy(id = "covg_DILong25_Slf_slidBenefitAmt-sliderLabel")
	WebElement beneAmount_SDI;

	@FindBy(xpath = "//span[@class='lblHdrDIGrpDisable']")
	WebElement DisabilityInsurance_Label;
	
	@FindBy(id = "rider_DIGrpDisable_chk_IPO_Slf")
	WebElement InflationProtectionRider_Self_AAFP;
	
	
	@FindBy(id = "covg_DIGrpDisable1_Slf_selBenefitOptionRankGrade")
	WebElement BenefitOptionDII_Self_AAFP;

	@FindBy(xpath = "//span[@id='covg_DILong25_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='upArrow']")
	WebElement upArrow_Self_SDI;


	@FindBy(xpath = "//span[@id='covg_DILong25_Slf_slidBenefitAmt-sliderLabel']//parent::div/div[@id='downArrow']")
	WebElement downArrow_Self_SDI;
	
	@FindBy(id = "covg_DILong25_Slf_slidBenefitAmt-minLabel")
	WebElement minSliderLabel_SDISelf;
	
	@FindBy(id = "covg_DILong25_Slf_slidBenefitAmt-maxLabel")
	WebElement maxSliderLabel_SDISelf;
	
	@FindBy(id = "covg_DILong25_Slf_selWaitingPeriod")
	WebElement waitPrd_SDISelf;
	
	@FindBy(id = "covg_DILong25_Slf_selBenefitDuration")
	WebElement beneDuration_SDISelf;
	
	
	
	/*********************
	 * Labels Of Product on Coverage page
	 ********************************/

	@FindBy(xpath = "//div[@id='covg_LITenYr_Chd']//span[@class='childLabel']")
	WebElement Eligibile_Childs;
	
	@FindBy(xpath = "//span[@class='lblHdrLIFiveYr']")
	WebElement FiveYrLifeTermInsuranceLabel;

	@FindBy(xpath = "//span[@class='lblHdrLIFifteenYr']")
	WebElement FifteenYrLabel;
	
	@FindBy(xpath = "//span[@class='lblHdrLITenYr']")
	WebElement TenYrLifeTermInsuranceLabel;

	@FindBy(xpath = "//span[@class='lblHdrLITwentyYr']")
	WebElement TwentyYrLifeTermInsuranceLabel;

	@FindBy(xpath = "//span[@class='lblHdrLIFiftyYr']")
	WebElement FiftyYrLifeTermInsuranceLabel;

	@FindBy(xpath = "//span[@class='lblHdrAccdntDeath']")
	WebElement AccidentalDeathLabel;

	@FindBy(xpath = "//span[@class='lblHdrDILongPlus']")
	WebElement LongTermDisabilityPlusLabel;

	@FindBy(xpath = "//span[@class='lblHdrDILong']")
	WebElement LongTermDisabilityLabel;

	@FindBy(xpath = "//span[@class='lblHdrDIShort']")
	WebElement MidTermDisabilityLabel;

	@FindBy(xpath = "//span[@class='lblHdrDIRetirement']")
	WebElement RetirementDisabilityLabel;

	@FindBy(xpath = "//span[@class='lblHdrGrpOffOvr']")
	WebElement ProfessionalExpenseDisabilityLabel;

	@FindBy(xpath = "//span[@class='lblHdrCICriticalIllness']")
	WebElement CriticalIllnessLabel;

	@FindBy(xpath = "//span[@class='lblHdrHospitalIndem']")
	WebElement HospitalMoneyInsuranceLabel;

	
	@FindBy(xpath = "//span[@class='lblHdrLIAnnual']")
	WebElement TermLifeInsuranceLabel;
	
	@FindBy(xpath = "//span[@class='lblHdrDIGrpDisable']")
	WebElement DisabilityIncomeInsuranceLabel;
	
	@FindBy(id = "rdRiderOnlySlf-0")
	WebElement ChrinicIllnessRider_Self_Yes;

	/****************** Self ******************************/
	@FindBy(xpath = "//div[@id='covg_LIFiveYr_Slf']//span[@style='font-weight:bold;']")
	WebElement FiveYearQDSelf;
	
	@FindBy(xpath = "//div[@id='covg_LITenYr_Slf']//span[@style='font-weight:bold;']")
	WebElement TenYearQDSelf;
	
	
	
	

	/*----------------------------------------------MOBILE-----------------------------------------------------*/

	// *******************SELF************************//
	@FindBy(xpath = "//h1[text()='Your Coverage']")
	WebElement YourCoverage;

	/*---------------------------------------------------------------------------------------------------*/

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']")
	WebElement traditionalPlusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']")
	WebElement traditionalMinusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Slf_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement traditionalAmountSelf_Mobile;

	/*@FindBy(xpath = "(//div[@id='lblHdrLIFiveYr']//parent::div//following-sibling::div)[1]/i")
	WebElement traditionalArrowSelf_Mobile;*/
	
	@FindBy(xpath = "//div[@id='page-self']//div[@id='lblHdrLIFiveYr']//parent::div//following-sibling::div//i")
	WebElement traditionalArrowSelf_Mobile;
	
	@FindBy(xpath = "//div[@id='page-self']//div[@id='lblHdrLITenYr']//parent::div//following-sibling::div//i")
	WebElement tenYearArrowSelf_Mobile;
	
	/*@FindBy(xpath = "(//div[@id='lblHdrLITenYr']//parent::div//following-sibling::div)[1]/i")
	WebElement tenYearArrowSelf_Mobile;*/

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']")
	WebElement tenYearPlusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']")
	WebElement tenYearMinusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Slf_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement tenYrAmountSelf_Mobile;

	/*@FindBy(xpath = "(//div[@id='lblHdrLITwentyYr']//parent::div//following-sibling::div)[1]/i")
	WebElement twentyYearArrowSelf_Mobile;*/
	
	@FindBy(xpath = "//div[@id='page-self']//div[@id='lblHdrLITwentyYr']//parent::div//following-sibling::div//i")
	WebElement twentyYearArrowSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']")
	WebElement twentyYearPlusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']")
	WebElement twentyYearMinusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Slf_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement twentyYrAmountSelf_Mobile;

	/*@FindBy(xpath = "(//div[@id='lblHdrDIGrpDisable']//parent::div//following-sibling::div)[1]/i")
	WebElement longTermArrowSelf_Mobile;*/
	@FindBy(xpath = "//div[@id='page-self']//div[@id='lblHdrDIGrpDisable']//parent::div//following-sibling::div//i")
	WebElement longTermArrowSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIGrpDisable7_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']")
	WebElement longTermPlusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIGrpDisable7_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']")
	WebElement longTermMinusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIGrpDisable7_Slf_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement longTermAmountSelf_Mobile;

	/*@FindBy(xpath = "(//div[@id='lblHdrDIShort']//parent::div//following-sibling::div)[1]/i")
	WebElement shortTermArrowSelf_Mobile;*/
	
	@FindBy(xpath = "//div[@id='page-self']//div[@id='lblHdrDIShort']//parent::div//following-sibling::div//i")
	WebElement shortTermArrowSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']")
	WebElement shortTermPlusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']")
	WebElement shortTermMinusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Slf_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement shortTermAmountSelf_Mobile;

	/*@FindBy(xpath = "(//div[@id='lblHdrGrpOffOvr']//parent::div//following-sibling::div)[1]/i")
	WebElement businessArrowSelf_Mobile;*/
	
	@FindBy(xpath = "//div[@id='page-self']//div[@id='lblHdrGrpOffOvr']//parent::div//following-sibling::div//i")
	WebElement businessArrowSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_GrpOffOvr_Slf_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement BusinessAmountSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_GrpOffOvr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']")
	WebElement BusinessPlusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_GrpOffOvr_Slf_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']")
	WebElement BusinessMinusSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Slf_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement traditionalSliderSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Slf_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement tenYrSliderSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Slf_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement twentyYrSliderSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIGrpDisable7_Slf_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement longTermSliderSelf_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Slf_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement shortTermSliderSelf_Mobile;

	@FindBy(id = "covg_DIGrpDisable7_Slf_selWaitingPeriod")
	WebElement longWaitingPeriodSelf_Mobile;

	@FindBy(id = "covg_DIGrpDisable7_Slf_selBenefitDuration")
	WebElement longBenefitDurationSelf_Mobile;

	@FindBy(id = "covg_DIShort25_Slf_selWaitingPeriod")
	WebElement shortwaitingPeriodSelf_Mobile;

	@FindBy(id = "covg_DIShort25_Slf_selBenefitDuration")
	WebElement shortBenefitDurationSelf_Mobile;

	@FindBy(id = "covg_GrpOffOvr_Slf_selWaitingPeriod")
	WebElement businessWaitingPeriodSelf_Mobile;

	@FindBy(id = "covg_GrpOffOvr_Slf_selBenefitDuration")
	WebElement businessBenefitDurationSelf_Mobile;

	@FindBy(xpath = "//div[@id='field-rider_DIGrpDisable_chk_cola_Slf']//div//label")
	WebElement checkboxCOLASelf_Mobile;

	@FindBy(xpath = "//div[@id='field-rider_DILong_chk_catstrophicDisBft_Slf']//div//label")
	WebElement checkboxCDBSelf_Mobile;

	

	@FindBy(xpath="//div[@id='div_covg_LIFiveYr_Chd_lblEligibleChildNames']/label")
	WebElement EligibleChildName_Mob;
	
	// ******************Coverage Error Message*****************//
	@FindBy(xpath = "//div[@id='covg_LIAnnual_Sps']//div[contains(@class,'has-error')]//p")
	WebElement spouseCoverageErrorMsg;
	
	@FindBy(xpath = "//input[@id='covg_LITenYr_Sps_slidBenefitAmt']//parent::div//parent::div//following-sibling::p[contains(@class,'error')]")
	WebElement CoverageErrorMsg_TenYTL_Spouse;
	
	@FindBy(xpath="//p[contains(text(),'cannot exceed')]")
	WebElement spouseCoverageError1;

	@FindBy(id = "rdRiderOnlySlf-1")
	WebElement ChrinicIllnessRider_Self_No;

	@FindBy(id = "ciradioself1")
	WebElement OptionalRider_Self_Yes;

	@FindBy(id = "ciradioself2")
	WebElement OptionalRider_Self_No;

	@FindBy(id = "rdRiderOnlySps-0")
	WebElement ChrinicIllnessRider_Spouse_Yes;

	@FindBy(id = "rdRiderOnlySps-1")
	WebElement ChrinicIllnessRider_Spouse_No;

	@FindBy(id = "ciradiosps1")
	WebElement OptionalRider_Spouse_Yes;

	@FindBy(id = "ciradiosps2")
	WebElement OptionalRider_Spouse_No;
	
	
	
	@FindBy(xpath="//div[@id='covg_LIAnnual_Slf']//span[@style='font-weight:bold;']//div")
	WebElement QuickDecisionOption_Self;
	
	@FindBy(xpath="//div[@id='covg_LIAnnual_Sps']//span[@style='font-weight:bold;']//div")
	WebElement QuickDecisionOption_Spouse;
	
	@FindBy(xpath="//div[@id='covg_LIFiveYr_Slf']//span[@style='font-weight:bold;']//div")
	WebElement QuickDecisionTermLife_Self;
	
	
	

	//////////////////////////// Spouse/////////////////////

	// @FindBy(id="covg_LIFiveYr_Slf_slidBenefitAmt-sliderLabel")
	// WebElement abeSelfBenefitAmount5Yr;


	
	//////////////////////////// Spouse_Mobile/////////////////////

	@FindBy(xpath = "//h1[text()='Spouse Coverage']")
	WebElement SpouseCoverage_Mobile;

	@FindBy(xpath = "//div[@id='covg_LIFiveYr_Sps']//div[contains(@class,'noUi-handle noUi')]")
	WebElement traditionalSliderSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Sps_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement traditionalAmountSpouse_Mobile;

	/*@FindBy(xpath = "(//div[@id='lblHdrLIFiveYr']//parent::div//following-sibling::div)[2]")
	WebElement traditionalArrowSpouse_Mobile;*/
	@FindBy(xpath = "//div[@id='page-spouse']//div[@id='lblHdrLIFiveYr']//parent::div//following-sibling::div//i")
	WebElement traditionalArrowSpouse_Mobile;

	/*@FindBy(xpath = "(//div[@class='accordion-panel-title']//div[@id='lblHdrLITenYr']//parent::div//following-sibling::div//i)[2]")
	WebElement tenYearArrowSpouse_Mobile;*/
	
	@FindBy(xpath = "//div[@id='page-spouse']//div[@id='lblHdrLITenYr']//parent::div//following-sibling::div//i")
	WebElement tenYearArrowSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']/i")
	WebElement traditionalPlusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']/i")
	WebElement traditionalMinusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Sps_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement tenYrSliderSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Sps_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement tenYrAmountSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']/i")
	WebElement tenYrPlusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITenYr_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']/i")
	WebElement tenYrMinusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Sps_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement twentyYrSliderSpouse_Mobile;

	/*@FindBy(xpath = "(//div[@class='accordion-panel-title']//div[@id='lblHdrLITwentyYr']//parent::div//following-sibling::div//i)[2]")
	WebElement twentyYearArrowSpouse_Mobile;*/

	@FindBy(xpath = "//div[@id='page-spouse']//div[@id='lblHdrLITwentyYr']//parent::div//following-sibling::div//i")
	WebElement twentyYearArrowSpouse_Mobile;
	
	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Sps_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement twentyYrAmountSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']/i")
	WebElement twentyYrPlusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LITwentyYr_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']/i")
	WebElement twentyYrMinusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='covg_DIGrpDisable7_Sps']//div[contains(@class,'noUi-handle noUi')]")
	WebElement longTermSliderSpouse_Mobile;

	/*@FindBy(xpath = "(//div[@class='accordion-panel-title']//div[@id='lblHdrDIGrpDisable']//parent::div//following-sibling::div//i)[2]")
	WebElement longtermArrowSpouse_Mobile*/;
	@FindBy(xpath = "//div[@id='page-spouse']//div[@id='lblHdrDIGrpDisable']//parent::div//following-sibling::div//i")
	WebElement longtermArrowSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIGrpDisable7_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']/i")
	WebElement longTermPlusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIGrpDisable7_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']/i")
	WebElement longTermMinusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIGrpDisable7_Sps_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement longTermAmountSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Sps_slidBenefitAmt']//div[contains(@class,'noUi-handle noUi')]")
	WebElement shortTermSliderSpouse_Mobile;

	/*@FindBy(xpath = "(//div[@class='accordion-panel-title']//div[@id='lblHdrDIShort']//parent::div//following-sibling::div//i)[2]")
	WebElement shorttermArrowSpouse_Mobile;*/

	@FindBy(xpath = "//div[@id='page-spouse']//div[@id='lblHdrDIShort']//parent::div//following-sibling::div//i")
	WebElement shorttermArrowSpouse_Mobile;
	
	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-plus']/i")
	WebElement shortTermPlusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Sps_slidBenefitAmt']//div[contains(@class,'slider-controls')]//span[@class='slider-minus']/i")
	WebElement shortTermMinusSpouse_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_DIShort25_Sps_slidBenefitAmt']//div[contains(@class,'value')]")
	WebElement shortTermAmountSpouse_Mobile;

	@FindBy(id = "covg_DIGrpDisable7_Sps_selWaitingPeriod")
	WebElement longWaitingSpouse_Mobile;

	@FindBy(id = "covg_DIGrpDisable7_Sps_selBenefitDuration")
	WebElement longBenefitSpouse_Mobile;

	@FindBy(xpath = "//div[@id='field-rider_DIGrpDisable_chk_cola_Sps']//div//label")
	WebElement COLAcheckboxSpouse_Mobile;

	@FindBy(xpath = "//div[@id='field-rider_DILong_chk_catstrophicDisBft_Sps']//div//label")
	WebElement CDBcheckboxSpouse_Mobile;

	@FindBy(id = "covg_DIShort25_Sps_selWaitingPeriod")
	WebElement shortWaitingSpouse_Mobile;

	@FindBy(id = "covg_DIShort25_Sps_selBenefitDuration")
	WebElement shortBenefitSpouse_Mobile;

	//////////////////// Child///////////////////

	@FindBy(id = "covg_LIFiveYr_Chd_selBenefitAmt")
	WebElement BenefitChild_Mobile;
	
	@FindBy(xpath = "//h1[text()='Child Coverage']")
	WebElement ChildCoverage_Page_Mobile;

	@FindBy(xpath = "//div[@id='div_covg_LIFiveYr_Chd_selBenefitAmt']/label")
	WebElement BenefitQuesChild_Mobile;

	@FindBy(id = "covg_LIFiveYr_Chd_selBenefitAmt")
	WebElement Child_BenifitAmount;

	public boolean select_Type_of_Coverage_as_for_self_TermLife(String TypeofCove) throws Exception {

		try {
			log.debug("Select type of coverage for self for Term Life");
			if(!newCoverageSelf_Traditional.isDisplayed())
			{
				TermLifeInsuranceLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_Traditional, changeCoverageSelf_Traditional, TypeofCove);
							
			log.info("Coverage type for self for Term Life selected successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self for Term Life || Fail" + e.getMessage());
			throw (e);

		}

	}
	
	public boolean select_Type_of_Coverage_as_for_self_TenYTL(String TypeofCove) throws Exception {

		try {
			log.debug("Select type of coverage for self Ten year");
			if(!newCoverageSelf_Ten.isDisplayed())
			{
				TenYrLifeTermInsuranceLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_Ten, changeCoverageSelf_Ten, TypeofCove);
							
			log.info("Coverage type for self selected for Ten year successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self Ten year|| Fail" + e.getMessage());
			throw (e);

		}
	}	
	
	public boolean select_Type_of_Coverage_as_for_self_FifteenYTL(String TypeofCove) throws Exception {

		try {
			log.debug("Select type of coverage for self Fifteen year");
			if(!newCoverageSelf_Fifteen.isDisplayed())
			{
				FifteenYrLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_Fifteen, changeCoverageSelf_Fifteen, TypeofCove);
							
			log.info("Coverage type for self selected for Fifteen year successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self Fifteen year|| Fail" + e.getMessage());
			throw (e);

		}
	}	
	
	public boolean select_Type_of_Coverage_as_for_self_TwentyYTL(String TypeofCove) throws Exception {

		try {
			log.debug("Select type of coverage for self Twenty year");
			if(!newCoverageSelf_Twenty.isDisplayed())
			{
				TwentyYrLifeTermInsuranceLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_Twenty, changeCoverageSelf_Twenty, TypeofCove);
							
			log.info("Coverage type for self selected for Twenty year successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self Twenty year|| Fail" + e.getMessage());
			throw (e);

		}
	}
	
	public boolean select_Type_of_Coverage_as_for_self_ADnD(String TypeofCov) throws Exception {

		try {
			log.debug("Select type of coverage for self ADnD");
			if(!newCoverageSelf_AdnD.isDisplayed())
			{
				AccidentalDeathLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_AdnD, changeCoverageSelf_AdnD, TypeofCov);
							
			log.info("Coverage type for self selected for ADnD successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self ADnD|| Fail" + e.getMessage());
			throw (e);

		}
	}
	
	public boolean select_Type_of_Coverage_as_for_self_LTD(String TypeofCov) throws Exception {

		try {
			log.debug("Select type of coverage for self LTD");
			if(!newCoverageSelf_LTD.isDisplayed())
			{
				LongTermDisabilityLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_LTD, changeCoverageSelf_LTD, TypeofCov);
							
			log.info("Coverage type for self selected for LTD successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self LTD|| Fail" + e.getMessage());
			throw (e);

		}
	}
	

	public boolean selects_Type_of_Coverage_as_for_Self_under_STD(String TypeofCov) throws Throwable {
		try {
			log.debug("Select type of coverage for self STD");
			if(!newCoverageSelf_STD.isDisplayed())
			{
				LongTermDisabilityLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_STD, changeCoverageSelf_STD, TypeofCov);
							
			log.info("Coverage type for self selected for STD successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self STD|| Fail" + e.getMessage());
			throw (e);

		}
	}
	
	public boolean selects_Type_of_Coverage_as_for_Self_under_OOEDI(String TypeofCov) throws Throwable {
		try {
			log.debug("Select type of coverage for self Office Overhead");
			if(!newCoverageSelf_OO.isDisplayed())
			{
				ProfessionalExpenseDisabilityLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_OO, changeCoverageSelf_OO, TypeofCov);
							
			log.info("Coverage type for self selected for Office Overhead successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self Office Overhead|| Fail" + e.getMessage());
			throw (e);

		}
	}
	
	public boolean selects_Type_of_Coverage_as_for_Self_under_SDI(String TypeofCov) throws Throwable {
		try {
			log.debug("Select type of coverage for self SDI");
			if(!newCoverageSelf_SDI.isDisplayed())
			{
				LongTermDisabilityPlusLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_SDI, changeCoverageSelf_SDI, TypeofCov);
							
			log.info("Coverage type for self selected for SDI successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self SDI|| Fail" + e.getMessage());
			throw (e);

		}
	}
	
	public boolean selects_Type_of_Coverage_as_for_Self_under_HII(String TypeofCov) throws Throwable {
		try {
			log.debug("Select type of coverage for self HII");
			if(!newCoverageSelf_HII.isDisplayed())
			{
				HospitalMoneyInsuranceLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSelf_HII, changeCoverageSelf_HII, TypeofCov);
							
			log.info("Coverage type for self selected for HII successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for self HII|| Fail" + e.getMessage());
			throw (e);

		}
	}
	
	public boolean selects_Type_of_Coverage_as_for_Spouse_under_HII(String TypeofCov_HII) throws Throwable {
		try {
			log.debug("Select type of coverage for spouse HII");
			if(!newCoverageSpouse_HII.isDisplayed())
			{
				HospitalMoneyInsuranceLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSpouse_HII, changeCoverageSpouse_HII, TypeofCov_HII);
							
			log.info("Coverage type for spouse selected for HII successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for spouse HII|| Fail" + e.getMessage());
			throw (e);

		}
	}
	
	public boolean select_Type_of_Coverage_as_for_spouse_ADnD(String TypeofCov_ADnD) throws Exception {

		try {
			log.debug("Select type of coverage for Spouse ADnD");
			if(!newCoverageSpouse_AdnD.isDisplayed())
			{
				AccidentalDeathLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSpouse_AdnD, changeCoverageSpouse_AdnD, TypeofCov_ADnD);
							
			log.info("Coverage type for spouse for ADnD selected successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for spouse for ADnD || Fail" + e.getMessage());
			throw (e);

		}

}
	
	public boolean select_Type_of_Coverage_as_for_spouse_TwentyYTL(String TypeofCov_twenty) throws Exception {

		try {
			log.debug("Select type of coverage for Spouse Twenty Year");
			if(!newCoverageSpouse_Twenty.isDisplayed())
			{
				TwentyYrLifeTermInsuranceLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSpouse_Twenty, changeCoverageSpouse_Twenty, TypeofCov_twenty);
							
			log.info("Coverage type for spouse for Twenty year selected successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for spouse for Twenty year || Fail" + e.getMessage());
			throw (e);

		}

}
		public boolean select_Type_of_Coverage_as_for_spouse_TenYTL(String TypeofCov_ten) throws Exception {

			try {
				log.debug("Select type of coverage for Spouse Ten Year");
				if(!newCoverageSpouse_Ten.isDisplayed())
				{
					TenYrLifeTermInsuranceLabel.click();
					Thread.sleep(1000);
				}
				reuseMethod.selectSinglevalue(newCoverageSpouse_Ten, changeCoverageSpouse_Ten, TypeofCov_ten);
								
				log.info("Coverage type for spouse for Ten year selected successfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select coverage type for spouse for Ten year || Fail" + e.getMessage());
				throw (e);

			}

	}
	
		public boolean select_Type_of_Coverage_as_for_spouse_FifteenYTL(String TypeofCov_fifteen) throws Exception {

			try {
				log.debug("Select type of coverage for Spouse Fifteen Year");
				if(!newCoverageSpouse_Fifteen.isDisplayed())
				{
					FifteenYrLabel.click();
					Thread.sleep(1000);
				}
				reuseMethod.selectSinglevalue(newCoverageSpouse_Fifteen, changeCoverageSpouse_Fifteen, TypeofCov_fifteen);
								
				log.info("Coverage type for spouse for Fifteen year selected successfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select coverage type for spouse for Fifteen year || Fail" + e.getMessage());
				throw (e);

			}

	}
	
	public boolean select_Type_of_Coverage_as_for_spouse_TermLife(String STypeofCove) throws Exception {

		try {
			log.debug("Select type of coverage for spouse");
			if(!newCoverageSpouse_Traditional.isDisplayed())
			{
				TermLifeInsuranceLabel.click();
				Thread.sleep(1000);
			}
			reuseMethod.selectSinglevalue(newCoverageSpouse_Traditional, changeCoverageSpouse_Traditional, STypeofCove);
							
			log.info("Coverage type selected for spouse successfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select coverage type for spouse || Fail" + e.getMessage());
			throw (e);

		}

	}
	

	   public boolean selects_Type_of_Coverage_as_for_Child_HII(String CTypeofCove) throws Throwable {
		 try {
				log.debug("Select type of coverage for Child under HII");
				if(!newCoverageChild_HII.isDisplayed())
				{
					HospitalMoneyInsuranceLabel.click();
					Thread.sleep(1000);
				}
		
				reuseMethod.selectSinglevalue(newCoverageChild_HII, changeCoverageChild_HII, CTypeofCove);				
				log.info("Coverage type selected for Child successfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select coverage type for Child || Fail" + e.getMessage());
				throw (e);

			} 
	   }
	/*public boolean coverage_page_is_displayed_to_user_and_select_Benefit_Amount_on_coverage_page() throws Exception {

		try {
			log.debug("Select Benefit amount");
			reuseMethod.scrollDown(Slider);
			reuseMethod.Slider(Slider, 20);
			log.info("Amount selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Notable to select the amount || Fail" + e.getMessage());
			throw (e);
		}

	}*/

	public boolean request_Coverage_page_is_displayed_to_user_and_select_Benefit_Amount_for_Five_Year_Product_self_as(
			String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of Five Years Products");
			if(abeSelfBenefitAmount5Yr.isDisplayed())
			{
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_FiveYrProduct, Benefit, abeSelfBenefitAmount5Yr,
						downArrow_Self_FiveYrProduct);
			}
			else {
				FiveYrLifeTermInsuranceLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_FiveYrProduct, Benefit, abeSelfBenefitAmount5Yr,
						downArrow_Self_FiveYrProduct);
			}
			
			log.info("Amount selected for Self of Five Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of Five Year Product || Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean request_Coverage_page_is_displayed_to_user_and_select_Benefit_Amount_for_Spouse_as(String sBenefit)
			throws Exception {

		try {
			reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_FiveYrProduct, sBenefit, abeSpouseBenefitAmount5Yr,
					downArrow_Spouse_FiveYrProduct);
			log.info("Amount selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Notable to select the amount || Fail" + e.getMessage());
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}

	}
	// public boolean selects_benefit_amount_for_Spouse_as(String sBenefit) throws
	// Exception{

	public boolean selects_benefit_amount_for_Five_Year_Product_self_Child_as(String cBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Child of Five Years Products");
			reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_FiveYrProduct, cBenefit);
			log.info("Amount selected for Child of Five Years Product sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Child of Five Year Product || Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Child_as_under_FiveYTL(String CBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Child of Five Years Products");
			reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_5YrProduct, CBenefit);
			log.info("Amount selected for Child of Five Years Product sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Child of Five Year Product || Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_benefit_amount_for_Ten_Year_Product_Child_as(String CBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Child of Ten Years Products");
			reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_10YrProduct, CBenefit);
			log.info("Amount selected for Child of Ten Years Product sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Child of Ten Year Product || Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_benefit_amount_for_Child_as_under_TwentyYTL(String CBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Child of 20 Years Products");
			reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_20YrProduct, CBenefit);
			log.info("Amount selected for Child of 20 Years Product sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Child of 20 Year Product || Fail" + e.getMessage());
			throw (e);
		}

	}

	
	
	public boolean validates_and_are_not_displayed_in_eligible_children_TenYTL(String child) throws Exception {

		try {
			log.debug("Verify only Eligible Children under TenYTL are Present on Coverage Page ");
			Eligibile_Childs.isDisplayed();
			reuseMethod.scrollDown(TenYrLifeTermInsuranceLabel);
			boolean check;
			String Childs = Eligibile_Childs.getText();
			String[] eligi_ChildList = Childs.split(",");
			
			if(!(BenefitAmount_Child_10YrProduct.isDisplayed()||BenefitAmountChild_TenYTL_Label.isDisplayed()))
			{
				TenYrLifeTermInsuranceLabel.click();
			}
			for(int i=0;i<eligi_ChildList.length;i++)
			{
				
			if (child.equalsIgnoreCase(eligi_ChildList[i])) {
				
				check=true;
				
				System.out.println("Child is Present"+child);
			} 
			else
			{
				check=false;
				
			}
			Assert.assertFalse(check);
			}
			log.info("Eligible Childrens under TenYTL are Verfied sucessfully... ||PASS");
			return true;
		} catch (Exception e) {
			log.error("Not able to Verify Eligible Children under TenYTL || Fail" + e.getMessage());
			throw (e);
		}

	}
	public boolean validates_Quick_Decision_is_not_displayed_for_FiveYTL() throws Throwable {

		try {
			log.debug("Verify Quick Decision is not displayed for FiveYTL");
		
			boolean check=FiveYearQDSelf.isDisplayed();
			Assert.assertFalse(check, "Bug||Quick Decision is displayed for FiveYTL");
			
			log.info("Quick Decision is displayed for FiveYTL");	
			return true;
		} catch (org.openqa.selenium.NoSuchElementException e) {
	    	System.out.println("Quick Decision is not displayed for FiveYTL");
	    	log.error("Not able to validate that Quick Decision is not displayed for FiveYTL|| Fail");
	        return false;
	    }
	}
	public boolean validates_Quick_Decision_is_not_displayed_for_TenYTL() throws Throwable {

		try {
			log.debug("Verify Quick Decision is not displayed for TenYTL");
		
			boolean check=TenYearQDSelf.isDisplayed();
			Assert.assertFalse(check, "Bug||Quick Decision is displayed for TenYTL");
			
			log.info("Quick Decision is displayed for TenYTL");	
			return true;
		} catch (org.openqa.selenium.NoSuchElementException e) {
	    	System.out.println("Quick Decision is not displayed for TenYTL");
	    	log.error("Not able to validate that Quick Decision is not displayed for tenYTL|| Fail");
	        return false;
	    }
	}
	
	public boolean validate_Max_aggregrate_Message_is_displayed_for_GroupTerm_Product() throws Throwable {

		try {
			log.debug("Validate Max aggregrate Message is displayed for Group Term Product");
			String MaxAggregate_Message=PropertyUtility.Load_MessageFile_Data("MaxAggregateMessage");
			reuseMethod.scrollDown(MaxAggregate_FiveYr);
			MaxAggregate_FiveYr.isDisplayed();
			String actual=MaxAggregate_FiveYr.getText();
			Assert.assertEquals(actual, MaxAggregate_Message,"MaxAggregate_Message does not match");
			
			log.info("Max aggregrate Message is validated for Group Term Product");	
			return true;
		} catch (org.openqa.selenium.NoSuchElementException e) {
	    	System.out.println("Max aggregrate Message is not validated for Group Term Product");
	    	log.error("Not able to validate Max aggregrate Message for Group Term Product|| Fail");
	        return false;
	    }
	}
	public boolean validate_Max_aggregrate_Message_is_displayed_for_TenYTL_Product() throws Throwable {

		try {
			log.debug("Validate Max aggregrate Message is displayed for 10-Year Level Term Life Insurance product");
			String MaxAggregate_Message=PropertyUtility.Load_MessageFile_Data("MaxAggregateMessage");
			Thread.sleep(2000);
			MaxAggregate_TenYr.isDisplayed();
			reuseMethod.scrollDown(MaxAggregate_TenYr);
			String actual=MaxAggregate_TenYr.getText();
			Assert.assertEquals(actual, MaxAggregate_Message,"MaxAggregate_Message does not match");
			
			log.info("Max aggregrate Message is validated for 10-Year Level Term Life Insurance product");	
			return true;
		} catch (org.openqa.selenium.NoSuchElementException e) {
	    	System.out.println("Max aggregrate Message is not validated for 10-Year Level Term Life Insurance product");
	    	log.error("Not able to validate Max aggregrate Message for 10-Year Level Term Life Insurance product|| Fail");
	        return false;
	    }
	}
	
	public boolean validate_Max_aggregrate_Message_is_displayed_for_TwentyYTL_Product() throws Throwable {

		try {
			log.debug("Validate Max aggregrate Message is displayed for 20-Year Level Term Life Insurance product");
			String MaxAggregate_Message=PropertyUtility.Load_MessageFile_Data("MaxAggregateMessage");
			Thread.sleep(2000);
			MaxAggregate_TwentyYr.isDisplayed();
			reuseMethod.scrollDown(MaxAggregate_TwentyYr);
			String actual=MaxAggregate_TwentyYr.getText();
			Assert.assertEquals(actual, MaxAggregate_Message,"MaxAggregate_Message does not match");
			
			log.info("Max aggregrate Message is validated for 20-Year Level Term Life Insurance product");	
			return true;
		} catch (org.openqa.selenium.NoSuchElementException e) {
	    	System.out.println("Max aggregrate Message is not validated for 20-Year Level Term Life Insurance product");
	    	log.error("Not able to validate Max aggregrate Message for 20-Year Level Term Life Insurance product|| Fail");
	        return false;
	    }
	}

	public boolean selects_Self_benefit_amount_of_for_Accidental_Death_as(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of Accidental Death Products");
			//reuseMethod.scrollDown(Next);
			if(abeSelfBenefitAmountAccidentalProduct.isDisplayed())
			{
			reuseMethod.select_Benefit_Amount_slider(upArrow_Self_AccidentalProduct, Benefit,
					abeSelfBenefitAmountAccidentalProduct, downArrow_Self_AccidentalProduct);
			}
			else
			{
				AccidentalDeathLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_AccidentalProduct, Benefit,
						abeSelfBenefitAmountAccidentalProduct, downArrow_Self_AccidentalProduct);
			}
			log.info("Amount selected for Self of Accidental Death Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of Accidental Death Product || Fail"
					+ e.getMessage());
			throw (e);
		}

	}


	public boolean selects_Spouse_benefit_amount_for_Accidental_Death_as(String sBenefit) throws Exception {

try {

		log.debug("Select Benefit Amount for Spouse of Accidental Death Products");
		if(abeSpouseBenefitAmountAccidentalProduct.isDisplayed())
		{
		reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_AccidentalProduct,sBenefit,abeSpouseBenefitAmountAccidentalProduct,downArrow_Spouse_AccidentalProduct);
		}
		else {
			AccidentalDeathLabel.click();
			reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_AccidentalProduct,sBenefit,abeSpouseBenefitAmountAccidentalProduct,downArrow_Spouse_AccidentalProduct);
		}
		log.info("Amount selected for Spouse of Accidental Death Product sucessfully || Pass");
		return true;
	}catch (Exception e) {
		log.error("Not able to select the benefit Amount for Spouse of Accidental Death Product|| Fail"+e.getMessage());
		throw(e);
}



	}

	public boolean selects_Child_benefit_amount_for_Accidental_Death_as(String cBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Child of Accidental Death Products");
			if (BenefitAmount_Child_AccidentalProduct.isDisplayed()) {
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_AccidentalProduct, cBenefit);
			} else {
				AccidentalDeathLabel.click();
				Thread.sleep(3000);
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_AccidentalProduct, cBenefit);
			}
			log.info("Amount selected for Child of Accidental Death Product sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Child of Accidental Death Product || Fail"
					+ e.getMessage());
			throw (e);
		}

	}

	public boolean selects_benefit_amount_for_Child_Hospital_as(String cBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Child of Hospital Money Insurance Products");
			if (BenefitAmount_Child_HospitalMoneyProduct.isDisplayed()) {
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_HospitalMoneyProduct, cBenefit);
			} else {
				HospitalMoneyInsuranceLabel.click();
				
				Thread.sleep(3000);
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Child_HospitalMoneyProduct, cBenefit);
			}
			log.info("Amount selected for Child of Hospital Money Insurance Product sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Child of Hospital Money Insurance Product || Fail"
					+ e.getMessage());
			throw (e);
		}

	}

	public boolean selects_benefit_amount_for_Ten_Year_Product_Spouse_as(String sBenefit) throws Exception {

		try {
		log.debug("Select Benefit Amount for Spouse of Ten Years Products");
		if(abeSpouseBenefitAmount10Yr.isDisplayed())
		{
			reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TenYrProduct,sBenefit,abeSpouseBenefitAmount10Yr,downArrow_Spouse_TenYrProduct);
		}
		else
		{
			TenYrLifeTermInsuranceLabel.click();
			Thread.sleep(3000);
			reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TenYrProduct, sBenefit, abeSpouseBenefitAmount10Yr,
					downArrow_Spouse_TenYrProduct);
		}
			
			
			log.info("Amount selected for Spouse of Ten Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Ten Year Product|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean validates_under_FiveYTL_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Five Years Products");
			String MinAmt = MinAmount_FiveYrSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Five Year Product is validated");
			}
			String MaxAmt = MaxAmount_FiveYrSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Five Year Product is validated");
			}
			log.info("Benefit Slider Ranges for Five Years Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Five Years Products|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_Chronic_Illness_Rider_for_Five_Year_Product() throws Exception {

		try {
			log.debug("Selects Chronic Illness Rider for Five Year Product");
			ChronicRider_FiveYrSelf.isDisplayed();
			ChronicRider_FiveYrSelf.click();
			Thread.sleep(2000);

			log.info("Chronic Illness Rider for Five Year Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Chronic Illness Rider for Five Year Product|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_Chronic_Illness_Rider_for_Five_Year_Product_Spouse() throws Exception {

		try {
			log.debug("Selects Chronic Illness Rider for Five Year Product Spouse");
			ChronicRider_FiveYrSpouse.isDisplayed();
			ChronicRider_FiveYrSpouse.click();

			log.info("Chronic Illness Rider for Five Year Product Spouse is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Chronic Illness Rider for Five Year Product Spouse|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_TenYTL(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Ten Years Products");
			if (abeSelfBenefitAmount10Yr.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TenYrProduct, sBenefit, abeSelfBenefitAmount10Yr,
						downArrow_Self_TenYrProduct);
			} else {
				TenYrLifeTermInsuranceLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TenYrProduct, sBenefit, abeSelfBenefitAmount10Yr,
						downArrow_Self_TenYrProduct);
			}
			log.info("Amount selected for Self of Ten Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {

			log.error("Not able to select the benefit Amount for Self of Ten Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}
	


	public boolean validates_under_TenYTL_the_Benefit_Slider_Range_as_to_Self(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Ten Years Products");
			String MinAmt = MinAmount_TenYrSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Ten Year Product is validated");
			}
			String MaxAmt = MaxAmount_TenYrSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Ten Year Product is validated");
			}
			log.info("Benefit Slider Ranges for Ten Years Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Ten Years Products|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Waiver_of_Premium_Rider_for_TenYear() throws Exception {

		try {
			log.debug("Selects Waiver of Premium  Rider for Ten Year Product");
			reuseMethod.scrollDown(abeSelfBenefitAmount10Yr);
			Thread.sleep(500);
			Rider_TenYrSelf.isDisplayed();
			Rider_TenYrSelf.click();
			Thread.sleep(1000);

			log.info("Waiver of Premium  Rider for Ten Year Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Waiver of Premium  Rider for Ten Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Waiver_of_Premium_Rider_for_TenYear_Spouse() throws Exception {

		try {
			log.debug("Selects Waiver of Premium  Rider for Ten Year Product Spouse ");
			Rider_TenYrSpouse.isDisplayed();
			Rider_TenYrSpouse.click();

			log.info("Waiver of Premium  Rider for Ten Year Product Spouse is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Waiver of Premium  Rider for Ten Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Waiver_Rider_for_Twenty_Year_Product_Spouse() throws Exception {

		try {
			log.debug("Selects Waiver of Premium  Rider for Twenty Year Product Spouse ");
			Rider_TwentyYrSpouse.isDisplayed();
			Rider_TwentyYrSpouse.click();

			log.info("Waiver of Premium  Rider for Twenty Year Product Spouse is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Waiver of Premium  Rider for Twenty Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}
	
	public boolean validates_under_TenYTL_the_Benefit_Amounts_Listed_are(String amount) throws Exception {

		try {
			log.debug("Validate Ten Year Benefit Amount for Child dropdown");
			
			List<WebElement> options = reuseMethod.dropDowngetOption(BenefitAmount_Child_10YrProduct);
			for (WebElement we : options) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for Ten Year Dropdown list is matched..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for Ten year Child Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for Ten year Child Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_TermLife_the_Benefit_Amounts_for_Child_Listed_are(String amount) throws Exception {

		try {
			log.debug("Validate TermLife ABE Benefit Amount for Child dropdown");
			
			List<WebElement> options = reuseMethod.dropDowngetOption(BenefitAmount_Child_5YrProduct);
			for (WebElement we : options) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for TermLife ABE Child Dropdown list is matched..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for TermLife ABE Child Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for TermLife ABE Child Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_TwentyYTL_the_Benefit_Amounts_for_Child_Listed_are(String amount) throws Exception {

		try {
			log.debug("Validate Twenty Year Benefit Amount for Child dropdown");
			
			List<WebElement> options = reuseMethod.dropDowngetOption(BenefitAmount_Child_20YrProduct);
			for (WebElement we : options) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for Twenty Year Child Dropdown list is matched..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for Twenty year Child Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for Twenty year Child Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_HLDD_the_Benefit_Amounts_Listed_are(String amount) throws Exception {

		try {
			
			log.debug("Validate HLDD Benefit Amount for Child dropdown");
			//Select select=new Select(BenefitAmount_Child_AccidentalProduct);
			List<WebElement> options =reuseMethod.dropDowngetOption(BenefitAmount_Child_AccidentalProduct);
			for (WebElement we : options) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for HLDD Dropdown list is matched for Child..."+we.getText());   
		            
				}
				
		      }
		
			log.info("Dropdown values for HLDD Child Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for HLDD Child Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	
	public boolean validates_under_HII_the_Benefit_Amounts_for_Child_Listed_are(String amount) throws Exception {

		try {
			log.debug("Validate HII Benefit Amount for Child dropdown");
		//	Select select=new Select(BenefitAmount_Child_HospitalMoneyProduct);
			if(!BenefitAmount_Child_HospitalMoneyProduct.isDisplayed())
			{
				HospitalMoneyInsuranceLabel.click();
			}
			List<WebElement> ChildBeneAmt_HII=	reuseMethod.dropDowngetOption(BenefitAmount_Child_HospitalMoneyProduct);
			for (WebElement we : ChildBeneAmt_HII) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for HII Dropdown list is matched for Child..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for HII Child Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for HII Child Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	
	public boolean validates_under_FifteenYTL_the_Benefit_Amounts_for_Child_Listed_are(String amount) throws Exception {

		try {
			log.debug("Validate HII Benefit Amount for Child dropdown");
		//	Select select=new Select(BenefitAmount_Child_HospitalMoneyProduct);
			if(!BenefitAmount_Child_15YrProduct.isDisplayed())
			{
				FifteenYrLabel.click();
			}
			List<WebElement> ChildBeneAmt_HII=	reuseMethod.dropDowngetOption(BenefitAmount_Child_15YrProduct);
			for (WebElement we : ChildBeneAmt_HII) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for 15 year Dropdown list is matched for Child..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for 15 year Child Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for 15 year Child Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_HII_the_Benefit_Amounts_for_Self_Listed_are(String amount) throws Exception {

		try {
			log.debug("Validate HII Benefit Amount for Self dropdown");
			List<WebElement> SelfBeneAmt_HII=	reuseMethod.dropDowngetOption(BenefitAmount_Self_HMI);
			for (WebElement we : SelfBeneAmt_HII) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for HII Dropdown list is matched for Self..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for HII Self Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for HLDD Self Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_HII_the_Benefit_Amounts_for_Spouse_Listed_are(String amount) throws Exception {

		try {
			log.debug("Validate HII Benefit Amount for Spouse dropdown");
			List<WebElement> SpouseBeneAmt_HII=	reuseMethod.dropDowngetOption(BenefitAmount_Spouse_HMI);
			for (WebElement we : SpouseBeneAmt_HII) 
			{
				if (we.getText().equals(amount))
				{
		            System.out.println("Value for HII Dropdown list is matched for Spouse..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for HII Spouse Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for HLDD Spouse Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_DII_the_Waiting_Period_Listed_are(String period) throws Exception {

		try {
			log.debug("Validate DII Waiting Period for Self dropdown");
			//Select select=new Select(WaitingPeriodDII_Self);
			List<WebElement> waitingPeriod=	reuseMethod.dropDowngetOption(WaitingPeriodDII_Self);
			for (WebElement we : waitingPeriod) 
			{
				if (we.getText().equals(period))
				{
		            System.out.println("Value for DII Waiting Period Dropdown list is matched..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for  DII Waiting Period Self Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for DII Waiting Period Self Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_DII_the_Benefit_Option_Listed_are(String option) throws Exception {

		try {
			log.debug("Validate DII Benefit Option for Self dropdown");
			
			List<WebElement> benefitOption=	reuseMethod.dropDowngetOption(BenefitOptionDII_Self);
			for (WebElement we : benefitOption) 
			{
				if (we.getText().equals(option))
				{
		            System.out.println("Value for DII Benefit Option Dropdown list is matched..."+we.getText());   
		            
				}
				
		      }
			
			log.info("Dropdown values for  DII Benefit Option Self Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for DII Benefit Option Self Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}

	}
	
	public boolean validate_Maximum_Monthly_Benefit_Amount_for_DII(String amount) throws Throwable {

		try {
			log.debug("Validate Maximum Monthly Benefit Amount for DII");
			MaxBenefitAmount_DII.isDisplayed();
			String actual=MaxBenefitAmount_DII.getText();
			System.out.println("Maximum Monthly Benefit Amount for DII is validated Successfully.. "+actual);
			Assert.assertEquals(actual,amount,"Maximum Benefit amount does not match");
			
			log.info("Maximum Monthly Benefit Amount for DII is validated successfully ||Pass");	
			return true;
		} catch (Exception e) {
	    	System.out.println("Maximum Monthly Benefit Amount is not validated for DII Self");
	    	log.error("Not able to validate Maximum Monthly Benefit Amount for DII Self|| Fail");
	        return false;
	    }
	}
	
	
	
	public boolean selects_Catastrophic_Disability_Benefit_Rider_for_DII_Self() throws Exception {

		try {
			log.debug("Selects Catastrophic Disability Benefit Rider for Disability Income Insurance Product");
			reuseMethod.scrollDown(abeSelfBenefitAmountDII);
			Thread.sleep(1000);
			Rider_Catastrophic_DII.isDisplayed();
			Rider_Catastrophic_DII.click();
			Thread.sleep(500);

			log.info("Catastrophic Disability Benefit Rider for Disability Income Insurance Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Catastrophic Disability Benefit Rider for Disability Income Insurance Product|| Fail"
							+ e.getMessage());

			throw (e);
		}

	}
	public boolean select_Rider_Benefit_Amount_for_DII_Self_as(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of DII Rider Insurance Products");
			if(SelfBenefitAmountDII_Rider.isDisplayed())
			{
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_DIIRider, Benefit, SelfBenefitAmountDII_Rider,
						downArrow_Self_DIIRider);
			}
			else {
				DisabilityIncomeInsuranceLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_DIIRider, Benefit, SelfBenefitAmountDII_Rider,
						downArrow_Self_DIIRider);
			}
			
			log.info("Amount selected for Self of DII Rider Insurance Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of DII Rider Insurance Product || Fail" + e.getMessage());
			throw (e);
		}

	}
	
	public boolean validates_under_Rider_the_Benefit_Slider_Range_for_DII_Self_as_to(String Min, String Max)throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for DII Rider Products");
			String MinAmt = MinAmount_DIISelfRider.getText();
			System.out.println("Actual Min DII Amount Self Rider:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for DII Product Rider is validated");
			}
			String MaxAmt = MaxAmount_DIISelfRider.getText();
			System.out.println("Actual Max DII Amount Self Rider:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for DII Rider Product is validated");
			}
			log.info("Benefit Slider Ranges for DII Rider Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for DII Rider Products|| Fail"
					+ e.getMessage());
			throw (e);
		}

	}

	public boolean selects_Cost_of_Living_Adjustment_Rider_for_DII_Self() throws Exception {

		try {
			log.debug("Selects Cost of Living Adjustment  Rider for Disability Income Insurance Product");
			reuseMethod.scrollDown(abeSelfBenefitAmountDII);
			Thread.sleep(1000);
			Rider_COLA_DII.isDisplayed();
			Rider_COLA_DII.click();
			Thread.sleep(500);

			log.info("Cost of Living Adjustment Rider for Disability Income Insurance is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Cost of Living Adjustment Rider for Disability Income Insurance Product|| Fail"+ e.getMessage());

			throw (e);
		}

	}
	
	public boolean validate_that_the_Rider_message_is_displayed() throws Throwable {

		try {
			log.debug("Validate that the Rider message is displayed");
			String expected=PropertyUtility.Load_MessageFile_Data("Rider_Message");
			reuseMethod.scrollDown(RiderMessage);
			RiderMessage.isDisplayed();
			String actual=RiderMessage.getText();
			Assert.assertEquals(actual,expected,"Rider_Message does not match");
			System.out.println("Rider Message is valiadted...");
			log.info("Rider Meaage is validated sucessfully...||Pass");	
			return true;
		} catch (org.openqa.selenium.NoSuchElementException e) {
	    	System.out.println("Rider Message is not valiadted...");
	    	log.error("Not able to Validate that the Rider message|| Fail");
	        return false;
	    }
	}

	
	public boolean validates_under_the_Benefit_Amounts_for_child_Listed_are(String amount1, String amount2, String amount3, String amount4, String amount5, String amount6, String amount7, String amount8, String amount9, String amount10,String amount11) {

		try {
			log.debug("Validate Benefit Amount for Child dropdown");
			String[] amount = {amount1, amount2, amount3, amount4, amount5,amount6,amount7,amount8,amount9,amount10,amount11};
			int length = amount.length;
			 /*Select s = new Select(BenefitAmount_Child_FiveYrProduct);
		 		List<WebElement> ChildBeneAmt=s.getOptions();
		 		System.out.println(ChildBeneAmt.size());
			*/
			
			//List<WebElement> ChildBeneAmt = driver.findElements((By) BenefitAmount_Child_FiveYrProduct);
			List<WebElement> ChildBeneAmt= reuseMethod.dropDowngetOption(BenefitAmount_Child_FiveYrProduct);
			for(int j=1;j<=ChildBeneAmt.size();j++) {
           
                  if (ChildBeneAmt.get(j).getText().equals(amount1))
                  {
                 System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());   
                 
                  }
                  else if  (ChildBeneAmt.get(j).getText().equals(amount2)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
                  else if  (ChildBeneAmt.get(j).getText().equals(amount3)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  else if  (ChildBeneAmt.get(j).getText().equals(amount4)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
                  else if  (ChildBeneAmt.get(j).getText().equals(amount5)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
                  else if  (ChildBeneAmt.get(j).getText().equals(amount6)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
                  else if  (ChildBeneAmt.get(j).getText().equals(amount7)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
                  else if  (ChildBeneAmt.get(j).getText().equals(amount8)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
                  else if  (ChildBeneAmt.get(j).getText().equals(amount9)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
                  
                  else if  (ChildBeneAmt.get(j).getText().equals(amount10)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  else if  (ChildBeneAmt.get(j).getText().equals(amount11)) {
                	  System.out.println("Value form Dropdown list is matched..."+ChildBeneAmt.get(j).getText());
                  }
                  
			 break;
                  
           }
            
			log.info("Dropdown values for HII Child Benefit dropdown Values are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Dropdown values for HLDD Child Benefit dropdown Values|| Fail" + e.getMessage());

			throw (e);
		}
			

	}
	

	// **********************************************MOBILE***************************************************//

	public boolean your_Coverage_page_is_displayed_select_the_amount_of_Traditional_Term_coverage_as_Mobile(
			String Benefit) throws Exception {
		try {
			log.debug("Traditional benefit Selected for Self (Mobile Site)");
			your_Coverage_page_is_displayed();
			reuseMethod.select_Benefit_Amount_slider(traditionalPlusSelf_Mobile, Benefit, traditionalAmountSelf_Mobile,
					traditionalMinusSelf_Mobile);
			
			log.info("Traditional benefit Selected for Self (Mobile Site)|| Pass");
		}

		catch (Exception e) {
			log.error("Traditional benefit Selected for Self (Mobile Site)|| Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean selects_Benefit_Amount_for_Self_as_under_TwentyYTL(String sBenefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of Twenty Years Products");
			if (abeSelfBenefitAmount20Yr.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TwentyYrProduct, sBenefit,
						abeSelfBenefitAmount20Yr, downArrow_Self_TwentyYrProduct);
			} else {
				TwentyYrLifeTermInsuranceLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TwentyYrProduct, sBenefit,
						abeSelfBenefitAmount20Yr, downArrow_Self_TwentyYrProduct);
			}
			log.info("Amount selected for Self of Twenty Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Twenty Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_TwentyYTL_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Twenty Years Products");
			String MinAmt = MinAmount_TwentyYrSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Twenty Year Product is validated");
			}
			String MaxAmt = MaxAmount_TwentyYrSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Twenty Year Product is validated");
			}
			log.info("Benefit Slider Ranges for Twenty Years Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Twenty Years Products|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_TwentyYTL(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Spouse of Twenty Years Products");
			if (abeSpouseBenefitAmount20Yr.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TwentyYrProduct, sBenefit,
						abeSpouseBenefitAmount20Yr, downArrow_Spouse_TwentyYrProduct);
			} else {
				TwentyYrLifeTermInsuranceLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TwentyYrProduct, sBenefit,
						abeSpouseBenefitAmount20Yr, downArrow_Spouse_TwentyYrProduct);
			}
			log.info("Amount selected for Spouse of Twenty Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to select the benefit Amount for Spouse of Twenty Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_LTDPlus(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Spouse of LTDP Products");
			if (abeSpouseBenefitAmountLTDPProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_LTDPProduct, sBenefit,
						abeSpouseBenefitAmountLTDPProduct, downArrow_Spouse_LTDPProduct);
			} else {
				LongTermDisabilityPlusLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_LTDPProduct, sBenefit,
						abeSpouseBenefitAmountLTDPProduct, downArrow_Spouse_LTDPProduct);
			}
			log.info("Amount selected for Spouse of LTDP Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of LTDP Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_TwentyYTL_for_Spouse_the_Benefit_Slider_Range_as_to(String Min, String Max)
			throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges of Spouse for Twenty Years Products");
			String MinAmt = MinAmount_TwentyYrSpouse.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Twenty Year Product of Spouse is validated");
			}
			String MaxAmt = MaxAmount_TwentyYrSpouse.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Twenty Year Product of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for Twenty Years Products of Spouse  are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Twenty Years of Spouse Products|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_ADnD_the_Benefit_Slider_Range_as_to_for_Spouse(String Min, String Max)throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges of Spouse for Accidental Death Products");
			String MinAmt = MinAmount_ACCSpouse.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Accidental Death Product of Spouse is validated");
			}
			String MaxAmt = MaxAmount_ACCSpouse.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for  Accidental Death Product of Spouse is validated");
			}
			log.info(
					"Benefit Slider Ranges for Accidental Death Products of Spouse  are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Accidental Death of Spouse Products|| Fail"
					+ e.getMessage());

			throw (e);
		}
		}
public boolean validates_under_FiveYTL_the_Benefit_Slider_Range_as_to_for_Spouse(String Min,String Max) throws Exception{
	
	try {
			log.debug("Validate Benefit Slider Ranges of Spouse for Five Year Term Insurance Products");
			String MinAmt= MinAmount_FiveYrSpouse.getText();
			System.out.println("Actual Min Amount:"+MinAmt);
			if(MinAmt.equalsIgnoreCase(Min))
			{
				System.out.println("Minimum Range for Five Year Term Insurance of Spouse is validated");
			}
			String MaxAmt= MaxAmount_FiveYrSpouse.getText();
			System.out.println("Actual Max Amount:"+MaxAmt);
			
			if(MaxAmt.equalsIgnoreCase(Max))
			{
				System.out.println("Maximum Range for Five Year Term Insurance Product of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for Five Year Term Insurance Products of Spouse  are validated sucessfully || Pass");
			return true;
		}catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Five Year Term Insurance of Spouse Products|| Fail"+e.getMessage());
			
			throw(e);
	}
	
}
public boolean validates_under_TenYTL_the_Benefit_Slider_Range_as_to_for_Spouse(String Min,String Max) throws Exception{
	
	try {
			log.debug("Validate Benefit Slider Ranges of Spouse for Ten Year Term Insurance Products");
			String MinAmt= MinAmount_TenYrSpouse.getText();
			System.out.println("Actual Min Amount:"+MinAmt);
			if(MinAmt.equalsIgnoreCase(Min))
			{
				System.out.println("Minimum Range for Ten Year Term Insurance Product of Spouse is validated");
			}
			String MaxAmt= MaxAmount_TenYrSpouse.getText();
			System.out.println("Actual Max Amount:"+MaxAmt);
			
			if(MaxAmt.equalsIgnoreCase(Max))
			{
				System.out.println("Maximum Range for Ten Year Term Insurance of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for Ten Year Term Insurance Products of Spouse  are validated sucessfully || Pass");
			return true;
		}catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Ten Year Term Insurance Spouse Products|| Fail"+e.getMessage());
			
			throw(e);
	}
	
}

public boolean validates_under_TwentyYTL_the_Benefit_Slider_Range_as_to_for_Spouse(String Min,String Max) throws Exception{
	
	try {
			log.debug("Validate Benefit Slider Ranges of Spouse for Twenty Year Term Insurance Products");
			String MinAmt= MinAmount_TwentyYrSpouse.getText();
			System.out.println("Actual Min Amount:"+MinAmt);
			if(MinAmt.equalsIgnoreCase(Min))
			{
				System.out.println("Minimum Range for Twenty Year Term Insurance Product of Spouse is validated");
			}
			String MaxAmt= MaxAmount_TwentyYrSpouse.getText();
			System.out.println("Actual Max Amount:"+MaxAmt);
			
			if(MaxAmt.equalsIgnoreCase(Max))
			{
				System.out.println("Maximum Range for Twenty Year Term Insurance of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for Twenty Year Term Insurance Products of Spouse  are validated sucessfully || Pass");
			return true;
		}catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Twenty Year Term Insurance Spouse Products|| Fail"+e.getMessage());
			
			throw(e);
	}
	
}


public boolean validates_under_LTDPlus_the_Benefit_Slider_Range_as_to_for_Spouse(String Min,String Max) throws Exception{
	
	try {
			log.debug("Validate Benefit Slider Ranges of Spouse for LTDP Products");
			String MinAmt= MinAmount_LTDPSpouse.getText();
			System.out.println("Actual Min Amount:"+MinAmt);
			if(MinAmt.equalsIgnoreCase(Min))
			{
				System.out.println("Minimum Range for LTDP of Spouse is validated");
			}
			String MaxAmt= MaxAmount_LTDPSpouse.getText();
			System.out.println("Actual Max Amount:"+MaxAmt);
			
			if(MaxAmt.equalsIgnoreCase(Max))
			{
				System.out.println("Maximum Range for LTDP Product of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for LTDP Products of Spouse  are validated sucessfully || Pass");
			return true;
		}catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for LTDP of Spouse Products|| Fail"+e.getMessage());
			
			throw(e);
	}
	
}
public boolean validates_under_LTD_the_Benefit_Slider_Range_as_to_for_Spouse(String Min,String Max) throws Exception{
	
	try {
			log.debug("Validate Benefit Slider Ranges of Spouse for LTD Products");
			String MinAmt= MinAmount_LTDSpouse.getText();
			System.out.println("Actual Min Amount:"+MinAmt);
			if(MinAmt.equalsIgnoreCase(Min))
			{
				System.out.println("Minimum Range for LTD Product of Spouse is validated");
			}
			String MaxAmt= MaxAmount_LTDSpouse.getText();
			System.out.println("Actual Max Amount:"+MaxAmt);
			
			if(MaxAmt.equalsIgnoreCase(Max))
			{
				System.out.println("Maximum Range for LTD of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for LTD Products of Spouse  are validated sucessfully || Pass");
			return true;
		}catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for LTD Spouse Products|| Fail"+e.getMessage());
			
			throw(e);
	}
	
}


public boolean validates_under_MTDI_the_Benefit_Slider_Range_as_to_for_Spouse(String Min,String Max) throws Exception{
	
	try {
			log.debug("Validate Benefit Slider Ranges of Spouse for MID Products");
			String MinAmt= MinAmount_MIDSpouse.getText();
			System.out.println("Actual Min Amount:"+MinAmt);
			if(MinAmt.equalsIgnoreCase(Min))
			{
				System.out.println("Minimum Range for MID of Spouse is validated");
			}
			String MaxAmt= MaxAmount_MIDSpouse.getText();
			System.out.println("Actual Max Amount:"+MaxAmt);
			
			if(MaxAmt.equalsIgnoreCase(Max))
			{
				System.out.println("Maximum Range for MID Product of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for MID Products of Spouse  are validated sucessfully || Pass");
			return true;
		}catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for MID of Spouse Products|| Fail"+e.getMessage());
			
			throw(e);
	}
	
}
public boolean validates_under_CI_the_Benefit_Slider_Range_as_to_for_Spouse(String Min,String Max) throws Exception{
	
	try {
			log.debug("Validate Benefit Slider Ranges of Spouse for CI Products");
			String MinAmt= MinAmount_CISpouse.getText();
			System.out.println("Actual Min Amount:"+MinAmt);
			if(MinAmt.equalsIgnoreCase(Min))
			{
				System.out.println("Minimum Range for CI Product of Spouse is validated");
			}
			String MaxAmt= MaxAmount_CISpouse.getText();
			System.out.println("Actual Max Amount:"+MaxAmt);
			
			if(MaxAmt.equalsIgnoreCase(Max))
			{
				System.out.println("Maximum Range for CI of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for CI Products of Spouse  are validated sucessfully || Pass");
			return true;
		}catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for CI Spouse Products|| Fail"+e.getMessage());
			
			throw(e);
	}
	
}




	

	public boolean selects_Waiver_Rider_for_Twenty_Year_Product() throws Exception {

		try {
			log.debug("Selects Waiver of Premium  Rider for Twenty Year Product");
			reuseMethod.scrollDown(abeSelfBenefitAmount20Yr);
			Thread.sleep(500);
			Rider_TwentyYrSelf.isDisplayed();
			Rider_TwentyYrSelf.click();
			Thread.sleep(1000);

			log.info("Waiver of Premium  Rider for Twenty Year Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Waiver of Premium  Rider for Twenty Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_FiftyYTL(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Fifty Years Products");
			if (abeSelfBenefitAmount50Yr.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_FiftyYrProduct, sBenefit,
						abeSelfBenefitAmount50Yr, downArrow_Self_FiftyYrProduct);
			} else {
				FiftyYrLifeTermInsuranceLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_FiftyYrProduct, sBenefit,
						abeSelfBenefitAmount50Yr, downArrow_Self_FiftyYrProduct);
			}
			log.info("Amount selected for Self of Fifty Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Fifty Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_FiftyYTL_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Fifty Years Products");
			String MinAmt = MinAmount_FiftyYrSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Fifty Year Product is validated");
			}
			String MaxAmt = MaxAmount_FiftyYrSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Fifty Year Product is validated");
			}
			log.info("Benefit Slider Ranges for Fifty Years Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Fifty Years Products|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_FiftyYTL(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Spouse of Fifty Years Products");
			if (abeSpouseBenefitAmount50Yr.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_FiftyYrProduct, sBenefit,
						abeSpouseBenefitAmount50Yr, downArrow_Spouse_FiftyYrProduct);
			} else {
				FiftyYrLifeTermInsuranceLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_FiftyYrProduct, sBenefit,
						abeSpouseBenefitAmount50Yr, downArrow_Spouse_FiftyYrProduct);
			}
			log.info("Amount selected for Spouse of Fifty Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Fifty Year Product|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_FiftyYTL_for_Spouse_the_Benefit_Slider_Range_as_to(String Min, String Max)
			throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges of Spouse for Fifty Years Products");
			String MinAmt = MinAmount_FiftyYrSpouse.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Fifty Year Product of Spouse is validated");
			}
			String MaxAmt = MaxAmount_FiftyYrSpouse.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Fifty Year Product of Spouse is validated");
			}
			log.info("Benefit Slider Ranges for Fifty Years Products of Spouse  are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Fifty Years of Spouse Products|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_ADnD(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Accidental Death Products");
			if (abeSelfBenefitAmountAccidentalProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_AccidentalProduct, sBenefit,
						abeSelfBenefitAmountAccidentalProduct, downArrow_Self_AccidentalProduct);
			} else {
				AccidentalDeathLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_AccidentalProduct, sBenefit,
						abeSelfBenefitAmountAccidentalProduct, downArrow_Self_AccidentalProduct);
			}
			log.info("Amount selected for Self of Accidental Death Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Accidental Death Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_ADnD_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Accidental Death Products");
			String MinAmt = MinAmount_ACCSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range forAccidental Death Product is validated");
			}
			String MaxAmt = MaxAmount_ACCSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Accidental Death Product is validated");
			}
			log.info("Benefit Slider Ranges for Accidental Death Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to Validate Benefit Slider Ranges for Accidental Death Products|| Fail" + e.getMessage());

			throw (e);
		}

	}
	 public boolean click_on_Long_Term_Disability_Plus_Insurance_on_Request_Coverage_Page() throws Throwable {

		 try {
			 log.debug("Click on Long-Term Disability Plus Insurance on Request Coverage Page");
			 	reuseMethod.scrollDown(LongTermDisabilityPlusLabel);
			 	LongTermDisabilityPlusLabel.click();
			 	Thread.sleep(2000);
			 	
				log.info("Long-Term Disability Plus Insurance on Request Coverage Page is Clicked sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to Click on Long-Term Disability Plus Insurance on Request Coverage Page|| Fail" + e.getMessage());

				throw (e);
			}

	   }
	 public boolean click_on_Long_Term_Disability_Insurance_on_Request_Coverage_Page() throws Throwable {

		 try {
			 log.debug("Click on Long-Term Disability Insurance on Request Coverage Page");
			 	reuseMethod.scrollDown(LongTermDisabilityLabel);
			 	LongTermDisabilityLabel.click();
				Thread.sleep(2000);
				log.info("Long-Term Disability Insurance on Request Coverage Page is Clicked sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to Click on Long-Term Disability Insurance on Request Coverage Page|| Fail" + e.getMessage());

				throw (e);
			}

	   }
	 public boolean click_on_Mid_Term_Disability_Insurance_on_Request_Coverage_Page() throws Throwable {

		 try {
			 log.debug("Click on Mid-Term Disability Insurance on Request Coverage Page");
				reuseMethod.scrollDown(MidTermDisabilityLabel);
			 	MidTermDisabilityLabel.click();
				Thread.sleep(2000);
				log.info("Mid-Term Disability Plus Insurance on Request Coverage Page is Clicked sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to Click on Mid-Term Disability Plus Insurance on Request Coverage Page|| Fail" + e.getMessage());

				throw (e);
			}

	   }
	 public boolean click_on_Group_Ten_Year_Level_Term_Life_Insurance_on_Request_Coverage_Page() throws Throwable {

		 try {
			 log.debug("Click on Group Ten-Year Level Term Life Insurance on Request Coverage Page");
			 	reuseMethod.scrollDown(TenYrLifeTermInsuranceLabel);
			 	TenYrLifeTermInsuranceLabel.click();
			 	Thread.sleep(2000);
			 	
				log.info("Group Ten-Year Level Term Life Insurance on Request Coverage Page is Clicked sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to Click on Group Ten-Year Level Term Life Insurance on Request Coverage Page|| Fail" + e.getMessage());

				throw (e);
			}

	   }
	 public boolean click_on_Group_Twenty_Year_Level_Term_Life_Insurance_on_Request_Coverage_Page() throws Throwable {

		 try {
			 log.debug("Click on Twenty-Year Level Term Life Insurance on Request Coverage Page");
			 	reuseMethod.scrollDown(TwentyYrLifeTermInsuranceLabel);
			 	TwentyYrLifeTermInsuranceLabel.click();
			 	Thread.sleep(2000);
			 	
				log.info("Twenty-Year Level Term Life Insurance on Request Coverage Page is Clicked sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to Click on Twenty-Year Level Term Life Insurance on Request Coverage Page|| Fail" + e.getMessage());

				throw (e);
			}

	   }
	

	public boolean selects_Benefit_Amount_for_Self_as_under_LTDPlus(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Long term Disability Plus Products");
			if (abeSelfBenefitAmountLTDPProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_LTDPProduct, sBenefit,
						abeSelfBenefitAmountLTDPProduct, downArrow_Self_LTDPProduct);
			} else {
				LongTermDisabilityPlusLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_LTDPProduct, sBenefit,
						abeSelfBenefitAmountLTDPProduct, downArrow_Self_LTDPProduct);
			}
			log.info("Amount selected for Self of Long term Disability Plus Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of  Long term Disability Plus Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Wait_Period_for_Self_as_under_LTDPlus(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Long term Disability Plus Products");
			reuseMethod.scrollDown(WaitingPeriod_LTDP);
			reuseMethod.dropDownselectbyvalue(WaitingPeriod_LTDP, period);
			Thread.sleep(1000);

			log.info("Waiting Period is  selected for Self of Long term Disability Plus Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for self of Long term Disability Plus Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Wait_Period_for_Spouse_as_under_LTDPlus(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Long term Disability Plus Products Spouse");
			reuseMethod.dropDownselectbyvalue(WaitingPeriodSpouse_LTDP, period);

			log.info("Waiting Period is  selected for Spouse of Long term Disability Plus Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for Spouse of Long term Disability Plus Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_LTDPlus_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Long term Disability Plus Products");
			String MinAmt = MinAmount_LTDPSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Long term Disability Plus is validated");
			}
			String MaxAmt = MaxAmount_LTDPSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range forLong term Disability Plus  Product is validated");
			}
			log.info("Benefit Slider Ranges for Long term Disability Plus Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Long term Disability Plus Products|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Catastrophic_Disability_Benefit_Rider_for_LDTP() throws Exception {

		try {
			log.debug("Selects Catastrophic Disability Benefit Rider for Long term Disability Plus Product");
			reuseMethod.scrollDown(abeSelfBenefitAmountLTDPProduct);
			Thread.sleep(1000);
			Rider_Catastrophic.isDisplayed();
			Rider_Catastrophic.click();
			Thread.sleep(500);

			log.info(
					"Catastrophic Disability Benefit Rider for Long term Disability Plus Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to Selects Catastrophic Disability Benefit Rider for Long term Disability Plus Product|| Fail"
							+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Cost_of_Living_Adjustment_Rider_under_LTDP_Product() throws Exception {

		try {
			log.debug("Selects Cost of Living Adjustment  Rider for Long term Disability Plus Product");
			reuseMethod.scrollDown(abeSelfBenefitAmountLTDPProduct);
			Thread.sleep(1000);
			Rider_COLA_LTDP.isDisplayed();
			Rider_COLA_LTDP.click();
			Thread.sleep(500);

			log.info(
					"Cost of Living Adjustment Rider for Long term Disability Plus Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Cost of Living Adjustment Rider for Long term Disability Plus Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Catastrophic_Disability_Benefit_Rider_for_Spouse_under_LTDPlus() throws Exception {

		try {
			log.debug("Selects Catastrophic Disability Benefit Rider for Spouse Long term Disability Plus Product");
			Rider_Catastrophic_Spouse.isDisplayed();
			Rider_Catastrophic_Spouse.click();

			log.info(
					"Catastrophic Disability Benefit Rider for Spouse Long term Disability Plus Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to Selects Catastrophic Disability Benefit Rider for Spouse Long term Disability Plus Product|| Fail"
							+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Cost_of_Living_Adjustment_Rider_for_LTDP_Product_for_Spouse() throws Exception {

		try {
			log.debug("Selects Cost of Living Adjustment Rider for Spouse Long term Disability Plus Product");
			Rider_COLA_LTDP_Spouse.isDisplayed();
			Rider_COLA_LTDP_Spouse.click();

			log.info(
					"Cost of Living Adjustment Rider for Spouse Long term Disability Plus Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to Selects Cost of Living Adjustment Rider for Spouse Long term Disability Plus Product|| Fail"
							+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_LTD(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Long term Disability  Products");
			if (abeSelfBenefitAmountLTDProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_LTDProduct, sBenefit,
						abeSelfBenefitAmountLTDProduct, downArrow_Self_LTDProduct);
			} else {
				LongTermDisabilityLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_LTDProduct, sBenefit,
						abeSelfBenefitAmountLTDProduct, downArrow_Self_LTDProduct);
			}
			log.info("Amount selected for Self of Long term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of  Long term Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_LTD(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Spouse of Long term Disability  Products");
			if (abeSpouseBenefitAmountLTDProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_LTDProduct, sBenefit,
						abeSpouseBenefitAmountLTDProduct, downArrow_Spouse_LTDProduct);
			} else {
				LongTermDisabilityLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_LTDProduct, sBenefit,
						abeSpouseBenefitAmountLTDProduct, downArrow_Spouse_LTDProduct);
			}
			log.info("Amount selected for Spouse of Long term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of  Long term Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Wait_Period_for_Self_as_under_LTD(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Long term Disability Products");
			reuseMethod.dropDownselectbyvalue(WaitingPeriod_LTD, period);

			log.info("Waiting Period is  selected for Self of Long term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for self of Long term Disability  Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Wait_Period_for_Spouse_as_under_LTD(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Spouse Long term Disability Products");
			reuseMethod.dropDownselectbyvalue(WaitingPeriodSpouse_LTD, period);

			log.info("Waiting Period is  selected for Spouse of Long term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for Spouse of Long term Disability  Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_LTD_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Long term Disability Products");
			String MinAmt = MinAmount_LTDSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Long term Disability is validated");
			}
			String MaxAmt = MaxAmount_LTDSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range forLong term Disability Product is validated");
			}
			log.info("Benefit Slider Ranges for Long term Disability Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Long term DisabilityProducts|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Cost_of_Living_Adjustment_Rider_under_LTD_product() throws Exception {

		try {
			log.debug("Selects Cost of Living Adjustment  Rider for Long term Disability Product");
			reuseMethod.scrollDown(abeSelfBenefitAmountLTDProduct);
			Thread.sleep(1000);
			Rider_COLA_Self_LTD.isDisplayed();
			Rider_COLA_Self_LTD.click();
			Thread.sleep(500);

			log.info(
					"Cost of Living Adjustment Rider for Long term Disability Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Cost of Living Adjustment Rider for Long term Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Cost_of_Living_Adjustment_Rider_for_Spouse_under_LTD() throws Exception {

		try {
			log.debug("Selects Cost of Living Adjustment Rider for Spouse Long term Disability Product");
			Rider_COLA_LTD_Spouse.isDisplayed();
			Rider_COLA_LTD_Spouse.click();

			log.info(
					"Cost of Living Adjustment Rider for Spouse Long term Disability Product is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to Selects Cost of Living Adjustment Rider for Spouse Long term Disability Product|| Fail"
							+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_MTDI(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Mid term Disability  Products");
			if (!abeSelfBenefitAmountMIDProduct.isDisplayed()) {
				
				MidTermDisabilityLabel.click();
				Thread.sleep(2000);
			}
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_MIDProduct, sBenefit,
						abeSelfBenefitAmountMIDProduct, downArrow_Self_MIDProduct);
			
			log.info("Amount selected for Self of Mid term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Mid term Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}
	
	public boolean selects_Benefit_Amount_for_Self_as_under_STD(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Short term Disability Products");
			if (!SelfBenefitAmount_STDProduct.isDisplayed()) {
				MidTermDisabilityLabel.click();
				Thread.sleep(1000);
			
			} 
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_STDProduct, sBenefit,
						SelfBenefitAmount_STDProduct, downArrow_Self_STDProduct);
			
			log.info("Amount selected for Self of Short term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Short term Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Wait_Period_for_Self_as_under_STD(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Short term Disability Products");
			reuseMethod.dropDownselectbyvalue(WaitingPrd_Self_STD, period);

			log.info("Waiting Period is  selected for Self of Short term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for self of Short term Disability  Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}
	
	public boolean selects_Wait_Period_for_Self_as_under_MTDI(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Mid term Disability Products");
			reuseMethod.dropDownselectbyvalue(WaitingPeriod_MID, period);

			log.info("Waiting Period is  selected for Self of Mid term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for self of Mid term Disability  Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_MTDI(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Spouse of Mid term Disability  Products");
			if (abeSpouseBenefitAmountMIDProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_MIDProduct, sBenefit,
						abeSpouseBenefitAmountMIDProduct, downArrow_Spouse_MIDProduct);
			} else {
				MidTermDisabilityLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_MIDProduct, sBenefit,
						abeSpouseBenefitAmountMIDProduct, downArrow_Spouse_MIDProduct);
			}
			log.info("Amount selected for Spouse of Mid term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Mid term Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Wait_Period_for_Spouse_as_under_MTDI(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Mid term Disability Products Spouse");
			reuseMethod.dropDownselectbyvalue(WaitingPeriod_MID_Spouse, period);

			log.info("Waiting Period is  selected for Spouse of Mid term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for Spouse of Mid term Disability  Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_Benefit_Duration_for_Self_as_under_STD(String duration) throws Exception {

		try {
			log.debug("Validate Benefit Duration for Short term Disability Products");
			List <WebElement> durationLi=reuseMethod.dropDowngetOption(BenefitDur_Self_STD);
			duration=duration.replaceAll("$","").replaceAll(",","");
			for(WebElement e:durationLi)
			{
				
				String durationamnt=e.getText();
				durationamnt=durationamnt.replaceAll("$","").replaceAll(",","");
				if(!durationamnt.equalsIgnoreCase("Select"))
				{
				if(durationamnt.equals(duration))
				{
				System.out.println("Benefit Amount for STD matched");
			}
			else
			{
				System.out.println("Benefit Amount for STD does not match");	
			}
			}}
			log.info("Validated Benefit Duration for Self of Short term Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Benefit Duration for Self of Short term Disability  Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}
	public boolean validates_under_MTDI_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Mid term Disability Products");
			String MinAmt = MinAmount_MIDSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Long term Disability is validated");
			}
			String MaxAmt = MaxAmount_MIDSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Mid term Disability Product is validated");
			}
			log.info("Benefit Slider Ranges for Mid term Disability Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Mid term Disability Products|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_CI(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Critical Illness Products");
			if (abeSelfBenefitAmountCIProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_CIProduct, sBenefit,
						abeSelfBenefitAmountCIProduct, downArrow_Self_CIProduct);
			} else {
				CriticalIllnessLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_CIProduct, sBenefit,
						abeSelfBenefitAmountCIProduct, downArrow_Self_CIProduct);
			}
			log.info("Amount selected for Self Critical Illness  Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Critical Illness Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_CI(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Spouse of Critical Illness Products");
			if (abeSpouseBenefitAmountCIProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_CIProduct, sBenefit,
						abeSpouseBenefitAmountCIProduct, downArrow_Spouse_CIProduct);
			} else {
				CriticalIllnessLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_CIProduct, sBenefit,
						abeSpouseBenefitAmountCIProduct, downArrow_Spouse_CIProduct);
			}
			log.info("Amount selected for Spouse Critical Illness  Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Critical Illness Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_CI_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges forCritical Illness Products");
			String MinAmt = MinAmount_CISelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range forCritical Illness is validated");
			}
			String MaxAmt = MaxAmount_CISelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Critical Illness Product is validated");
			}
			log.info("Benefit Slider Ranges forCritical Illness Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider RangesCritical Illness Products|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_RDI(String sBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Retirement Disability  Products");
			if (abeSelfBenefitAmountRetireProduct.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_RetireProduct, sBenefit,
						abeSelfBenefitAmountRetireProduct, downArrow_Self_RetireProduct);
			} else {
				RetirementDisabilityLabel.click();
				Thread.sleep(2000);
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_RetireProduct, sBenefit,
						abeSelfBenefitAmountRetireProduct, downArrow_Self_RetireProduct);
			}
			log.info("Amount selected for Self of Retirement  Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Retirement Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Wait_Period_for_Self_as_under_RDI(String period) throws Exception {

		try {
			log.debug("Select Waiting Period for Retirement Disability Products");
			reuseMethod.dropDownselectbyvalue(WaitingPeriod_Retire, period);

			log.info("Waiting Period is  selected for Self of Retirement Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for self of Retirement term Disability  Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}
	
	
	public boolean selects_Wait_Period_for_Self_as_under_PO(String WaitPeriod1) throws Exception {

		try {
			log.debug("Select Waiting Period for Practice Overhead Products");
			reuseMethod.dropDownselectbyvalue(PracticeOverhead_WaitingPeriod_Self, WaitPeriod1);

			log.info("Waiting Period is  selected for Self of Practice Overhead Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the Waiting Period for self of Practice Overhead Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_RDI_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Retirement Disability Products");
			String MinAmt = MinAmount_RetireSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Retirement Disability is validated");
			}
			String MaxAmt = MaxAmount_RetireSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Retirement Disability Product is validated");
			}
			log.info("Benefit Slider Ranges for Retirement Disability Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Retirement Disability Products|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_POEDI(String Benefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Professional/Office Overhead Disability Products");
			if (!abeSelfBenefitAmountProfProduct.isDisplayed()) {
				ProfessionalExpenseDisabilityLabel.click();
				Thread.sleep(2000);
			}
				
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_ProfProduct, Benefit,
						abeSelfBenefitAmountProfProduct, downArrow_Self_ProfProduct);
			
			log.info("Amount selected for Self Professional/Office Overhead Disability Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of  Professional/Office Overhead Disability Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	public boolean validates_under_POEDI_the_Benefit_Slider_Range_as_to(String Min, String Max) throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for  Professional Disability Products");
			String MinAmt = MinAmount_ProfSelf.getText();
			System.out.println("Actual Min Amount:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for  Professional Disability is validated");
			}
			String MaxAmt = MaxAmount_ProfSelf.getText();
			System.out.println("Actual Max Amount:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Professional Disability Product is validated");
			}
			log.info("Benefit Slider Ranges for Professional Disability Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges Professional Disability Products|| Fail"
					+ e.getMessage());
			// screenShotUtility.GetScreenShot(driver);
			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Self_as_under_HMI(String benefit) throws Exception {

		try {
			log.debug("Select Maximum Benefit amount for self Hospital Money Insurance Products");
			int index=benefit.indexOf("$");
			String benefitAmnt=benefit.substring(index+1);
			benefitAmnt=benefitAmnt.replaceAll(",", "");
			if (BenefitAmount_Self_HMI.isDisplayed()) {
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Self_HMI, benefitAmnt);
			} else {
				HospitalMoneyInsuranceLabel.click();
				Thread.sleep(2000);
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Self_HMI, benefitAmnt);
			}

			log.info(
					" Maximum Benefit amount for self Hospital Money Insurance Products is selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Select Maximum Benefit amount for Hospital Money Insurance Products for self|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}

	
	
	public boolean selects_Surgical_Option_Rider() throws Exception {

		try {
			log.debug("Select Surgical Rider for Hospital money Insurance");
			reuseMethod.scrollDown(BenefitAmount_Self_HMI);
			Thread.sleep(1000);
			Surgical_Rider.click();
			Thread.sleep(500);
	 		log.info("Select Surgical Rider for Hospital money Insurance is selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select Surgical Rider for Hospital money Insurance|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Surgical_Amount_as(String amount) throws Exception {

		try {
			log.debug("Select Surgical amount for Hospital money Insurance");
			reuseMethod.dropDownselectbyvalue(Surgical_Amount, amount);

			log.info("Select Surgical Amount for Hospital money Insurance is selected sucessfully|| Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Select Surgical Amount for Hospital money Insurance|| Fail" + e.getMessage());

			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_HMI(String benefit) throws Exception {

		try {
			log.debug("Select Maximum Benefit amount for Spouse Hospital Money Insurance Products");
			if (BenefitAmount_Spouse_HMI.isDisplayed()) {
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Spouse_HMI, benefit);
			} else {
				HospitalMoneyInsuranceLabel.click();
				Thread.sleep(2000);
				reuseMethod.dropDownselectbyvalue(BenefitAmount_Spouse_HMI, benefit);
			}

			log.info(
					" Maximum Benefit amount for Spouse Hospital Money Insurance Products is selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to Select Maximum Benefit amount for Hospital Money Insurance Products for Spouse|| Fail"
							+ e.getMessage());

			throw (e);
		}

	}

	public boolean selects_benefit_amount_for_Five_Year_Product_Spouse_as(String sBenefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Spouse of Five Years Products");
			reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_FiveYrProduct, sBenefit, abeSpouseBenefitAmount5Yr,
					downArrow_Spouse_FiveYrProduct);
			log.info("Amount selected for Spouse of Five Years Product sucessfully || Pass");
			return true;

		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Five Year Product|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean validates_under_FiveYTL_for_Spouse_the_Benefit_Slider_Range_as_to(String Min, String Max)
			throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Five Years Spouse Products");
			String MinAmt = MinAmount_FiveYrSpouse.getText();
			System.out.println("Actual Min Amount Spouse:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Five Year Spouse Product is validated");
			}
			String MaxAmt = MaxAmount_FiveYrSpouse.getText();
			System.out.println("Actual Max Amount Spouse:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Five Year Spouse Product is validated");
			}
			log.info("Benefit Slider Ranges for Five Years  Spouse Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Five Years Spouse Products|| Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	//AAFP*****************TermLife**************************
	
	public boolean validates_under_TermLife_the_Benefit_Slider_Range_for_Self_as_to(String Min, String Max)
			throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for TermLife Products");
			if(!MinAmount_TermLifeSelf.isDisplayed())
			{
				TermLifeInsuranceLabel.click();
				Thread.sleep(1000);
			}
			
			String MinAmt = MinAmount_TermLifeSelf.getText();
			System.out.println("Actual Min Amount Spouse:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for TermLife Product is validated");
			}
			String MaxAmt = MaxAmount_TermLifeSelf.getText();
			System.out.println("Actual Max Amount Spouse:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for TermLife Product is validated");
			}
			
			
			log.info("Benefit Slider Ranges for TermLife Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Five Years Spouse Products|| Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean validates_under_TermLife_the_ADnD_Rider_Benefit_Slider_Range_for_Self_as_to(String Min_Rider, String Max_Rider)
			throws Exception {

		try {
			log.debug("Validate AD&D Rider Benefit Slider Ranges for TermLife Products");
			String MinAmt = MinAmount_TermLifeSelf_ADnDRider.getText();
			System.out.println("Actual Min Amount Spouse:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min_Rider)) {
				System.out.println("Minimum Range for TermLife AD&D Rider Product is validated");
			}
			String MaxAmt = MaxAmount_TermLifeSelf_ADnDRider.getText();
			System.out.println("Actual Max Amount Spouse:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max_Rider)) {
				System.out.println("Maximum Range for TermLife AD&D Rider Product is validated");
			}
			log.info("AD&D Rider Benefit Slider Ranges for TermLife Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate AD&D Rider Benefit Slider Ranges for TermLife Self Products|| Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean selects_Optional_AD_D_Rider_under_TermLife()
			throws Exception {

		try {
			log.debug("Validate AD & D Rider is selected");
			TermLifeProduct_ADDRider_ChkBox_Self.click();
			
			log.info("AD & D Rider is selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select AD & D Rider || Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean selects_Rider_Benefit_Amount_under_TermLife_for_Self_as(String DRiderBenefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of TermLife Products");
			reuseMethod.select_Benefit_Amount_slider(TermLifeProduct_upArrow_ADDRider_Self, DRiderBenefit, TermLifeProduct_BenefitAmt_ADDRider_Self,
					TermLifeProduct_downArrow_ADDRider_Self);
			log.info("Amount selected for Self of TermLife Product sucessfully || Pass");
			return true;

		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of TermLife Product|| Fail" + e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean selects_Waiver_of_Premium_Rider_under_TermLife_for_Self()
			throws Exception {

		try {
			log.debug("Validate AD & D Rider is selected");
			TermLifeProduct_WOPRider_ChkBox_Self.click();
			
			log.info("AD & D Rider is selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select AD & D Rider || Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	public boolean validates_under_TermLife_the_Benefit_Slider_Range_for_Spouse_as_to(String Min, String Max)
			throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for TermLife Products");
			if(!MinAmount_TermLifeSpouse.isDisplayed())
			{
				TermLifeInsuranceLabel.click();
				Thread.sleep(1000);
			}
			String MinAmt = MinAmount_TermLifeSpouse.getText();
			System.out.println("Actual Min Amount Spouse:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for TermLife Product is validated");
			}
			String MaxAmt = MaxAmount_TermLifeSpouse.getText();
			System.out.println("Actual Max Amount Spouse:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for TermLife Product for spouse is validated");
			}
			log.info("Benefit Slider Ranges for TermLife Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for TermLife Spouse Products|| Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	public boolean validates_under_DII_the_Benefit_Slider_Range_as_to(String Min, String Max)throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for DII Products");
			String MinAmt = MinAmount_DIISelf.getText();
			System.out.println("Actual Min DII Amount Self:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for DII Product is validated");
			}
			String MaxAmt = MaxAmount_DIISelf.getText();
			System.out.println("Actual Max DII Amount Self:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for DII Product is validated");
			}
			log.info("Benefit Slider Ranges for DII Products are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for DII Products|| Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	// **********************************************MOBILE***************************************************//

	public boolean your_Coverage_page_is_displayed() throws Exception {
		try {
			log.debug("Your Coverage page is displayed (Mobile Site)");
			if (YourCoverage.isDisplayed()) {
				log.info("Your Coverage page is displayed (Mobile Site)|| Pass");
			}
			return true;
		}

		catch (Exception e) {
			log.error("Your Coverage page is displayed (Mobile Site)|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean select_the_amount_of_Traditional_Term_coverage_for_self_as_Mobile(String Benefit) throws Exception {
		try {
			log.debug("Traditional benefit Selected for Self (Mobile Site)");

			if (traditionalAmountSelf_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(traditionalPlusSelf_Mobile, Benefit,
						traditionalAmountSelf_Mobile, traditionalMinusSelf_Mobile);
				
			}

			else {

				Thread.sleep(500);

				traditionalArrowSelf_Mobile.click();
			
				Thread.sleep(500);

				reuseMethod.select_Benefit_Amount_slider(traditionalPlusSelf_Mobile, Benefit,
						traditionalAmountSelf_Mobile, traditionalMinusSelf_Mobile);

			}
			reuseMethod.scrollDown(traditionalArrowSelf_Mobile);
			log.info("Traditional benefit Selected for Self (Mobile Site)|| Pass");
			return true;
		}

		catch (Exception e) {
			log.error("Traditional benefit Selected for Self (Mobile Site)|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean select_the_amount_of_Ten_Year_coverage_for_self_as_Mobile(String Benefit1) throws Exception {
		try {
			log.debug("Ten year Selected for Self (Mobile Site)");

			if (tenYrAmountSelf_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(tenYearPlusSelf_Mobile, Benefit1, tenYrAmountSelf_Mobile,
						tenYearMinusSelf_Mobile);
			}

			else {

				Thread.sleep(500);
				tenYearArrowSelf_Mobile.click();
				
				Thread.sleep(500);

				reuseMethod.select_Benefit_Amount_slider(tenYearPlusSelf_Mobile, Benefit1, tenYrAmountSelf_Mobile,
						tenYearMinusSelf_Mobile);
				reuseMethod.scrollDown(tenYearArrowSelf_Mobile);
			}

			log.info("Ten year Selected for Self (Mobile Site) || Pass");
			return true;
		} catch (Exception e) {
			log.error("Ten year Selected for Self (Mobile Site)|| Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean select_the_amount_of_Twenty_Year_coverage_for_self_as_Mobile(String Benefit2) throws Exception {
		try {
			log.debug("Twenty Year Selected for Self (Mobile Site)");

			if (twentyYrAmountSelf_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(twentyYearPlusSelf_Mobile, Benefit2, twentyYrAmountSelf_Mobile,
						twentyYearMinusSelf_Mobile);
			} else {

				Thread.sleep(500);
				twentyYearArrowSelf_Mobile.click();
				
				Thread.sleep(500);

				reuseMethod.select_Benefit_Amount_slider(twentyYearPlusSelf_Mobile, Benefit2, twentyYrAmountSelf_Mobile,
						twentyYearMinusSelf_Mobile);
				reuseMethod.scrollDown(twentyYearArrowSelf_Mobile);
			}

			log.info("Twenty Year Selected for Self (Mobile Site) || Pass");
		} catch (Exception e) {
			log.error("Twenty Year Selected for Self (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean select_the_amount_of_Long_Term_coverage_for_self_as_Mobile(String Benefit3, String GDIwait,
			String GDIduration) throws Exception {
		try {

			log.debug("Long Term Selected for Self (Mobile Site)");

			if (longTermAmountSelf_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(longTermPlusSelf_Mobile, Benefit3, longTermAmountSelf_Mobile,
						longTermMinusSelf_Mobile);
			} else {

				Thread.sleep(500);
				longTermArrowSelf_Mobile.click();
				
				Thread.sleep(500);

				reuseMethod.select_Benefit_Amount_slider(longTermPlusSelf_Mobile, Benefit3, longTermAmountSelf_Mobile,
						longTermMinusSelf_Mobile);
				reuseMethod.scrollDown(longTermArrowSelf_Mobile);
			}

			reuseMethod.dropDownselectbyvalue(longWaitingPeriodSelf_Mobile, GDIwait);
			
			reuseMethod.dropDownselectbyvalue(longBenefitDurationSelf_Mobile, GDIduration);
			
			log.info("Long Term Selected for Self (Mobile Site) || Pass");
		} catch (Exception e) {
			log.error("Long Term Selected for Self (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean select_the_amount_of_Group_Disability_Insurance_coverage_as(String Benefit, String GDIwait) throws Throwable {
	    
		try {

			log.debug("Group Disability Selected for Self (Mobile Site)");

			if (!longTermAmountSelf_Mobile.isDisplayed()) {
				Thread.sleep(500);

				longTermArrowSelf_Mobile.click();
				
				Thread.sleep(500);

			}
			if (longTermPlusSelf_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(longTermPlusSelf_Mobile, Benefit, longTermAmountSelf_Mobile,
						longTermMinusSelf_Mobile);
				reuseMethod.scrollDown(longTermArrowSelf_Mobile);
			}
			
			reuseMethod.dropDownselectbyvalue(longWaitingPeriodSelf_Mobile, GDIwait);
			
			
			log.info("Group Disability Selected for Self (Mobile Site) || Pass");
		} catch (Exception e) {
			log.error("Group Disability Selected for Self (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}
	
	
	
	public boolean select_the_amount_of_Short_Term_coverage_for_self_as_Mobile(String Benefit4, String SDIwait,
			String SDIduration1) throws Exception {
		try {
			log.debug("Short Term Selected for Self (Mobile Site)");

			if (shortTermAmountSelf_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(shortTermPlusSelf_Mobile, Benefit4, shortTermAmountSelf_Mobile,
						shortTermMinusSelf_Mobile);
			} else {
				Thread.sleep(500);
				shortTermArrowSelf_Mobile.click();
		
				Thread.sleep(500);

				reuseMethod.select_Benefit_Amount_slider(shortTermPlusSelf_Mobile, Benefit4, shortTermAmountSelf_Mobile,
						shortTermMinusSelf_Mobile);
				reuseMethod.scrollDown(shortTermArrowSelf_Mobile);
			}
			reuseMethod.dropDownselectbyvalue(shortwaitingPeriodSelf_Mobile, SDIwait);
			reuseMethod.dropDownselectbyvalue(shortBenefitDurationSelf_Mobile, SDIduration1);
			log.info("Short Term Selected for Self (Mobile Site)|| Pass");
		}

		catch (Exception e) {
			log.error("Short Term Selected for Self (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}

		return true;
	}

	public boolean select_the_amount_of_Business_Overhead_coverage_for_self_as_Mobile(String Benefit5, String BOEwait,
			String BOEduration) throws Exception {
		try {
			log.debug("Business benefit Selected for Self (Mobile Site)");

			if (!BusinessAmountSelf_Mobile.isDisplayed()) {
				Thread.sleep(500);

				businessArrowSelf_Mobile.click();
				
				Thread.sleep(500);

			}
			if (BusinessPlusSelf_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(BusinessPlusSelf_Mobile, Benefit5, BusinessAmountSelf_Mobile,
						BusinessMinusSelf_Mobile);
				reuseMethod.scrollDown(businessArrowSelf_Mobile);
			}
			reuseMethod.dropDownselectbyvalue(businessWaitingPeriodSelf_Mobile, BOEwait);
			reuseMethod.dropDownselectbyvalue(businessBenefitDurationSelf_Mobile, BOEduration);
			log.info("Business benefit Selected for Self (Mobile Site)|| Pass");
		}

		catch (Exception e) {
			log.error("Business benefit Selected for Self (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}

		return true;
	}

	public boolean select_the_amount_for_all_coverages_for_self_as_Mobile(String Benefit, String Benefit1, String Benefit2,
			String Benefit3, String Benefit4, String GDIwait, String GDIduration, String SDIwait, String SDIduration1,
			String BOEwait, String BOEduration) throws Exception {
		try {
			log.debug("Select Coverage page details for self in Mobile site");

			select_the_amount_of_Traditional_Term_coverage_for_self_as_Mobile(Benefit);
			select_the_amount_of_Ten_Year_coverage_for_self_as_Mobile(Benefit1);
			select_the_amount_of_Twenty_Year_coverage_for_self_as_Mobile(Benefit2);
			select_the_amount_of_Long_Term_coverage_for_self_as_Mobile(Benefit3, GDIwait, GDIduration);
			select_the_amount_of_Short_Term_coverage_for_self_as_Mobile(Benefit4, SDIwait, SDIduration1);
			select_the_amount_of_Business_Overhead_coverage_for_self_as_Mobile(Benefit4, BOEwait, BOEduration);

			log.info("Coverage Page is filled sucessfully for self in Mobile Site || Pass");

			return true;
		} catch (Exception e) {
			log.error("Coverage Page is filled for self in Mobile Site || Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean Select_BOTH_rider_Checkbox_COLA_and_CDB_self_Mobile() throws Exception {
		try {
			log.debug("Select check box for BOTH riders for Self in Mobile site");
			checkboxCOLASelf_Mobile.click();
			checkboxCDBSelf_Mobile.click();

			log.info("Selected check box for BOTH riders for self in Mobile Site || Pass");

			return true;
		} catch (Exception e) {
			log.error("Not able to select check box for BOTH riders for self in Mobile Site || Fail" + e.getMessage());
			throw (e);
		}

	}

	// ***********************SPOUSE*************************************************//

	public boolean Spouse_Coverage_page_is_displayed_Mobile() throws Exception {
		try {
			log.debug("Spouse Coverage page is displayed (Mobile Site)");
			if (SpouseCoverage_Mobile.isDisplayed()) {
				log.info("Spouse Coverage page is displayed (Mobile Site)|| Pass");
			}
		}

		catch (Exception e) {
			log.error("Spouse Coverage page is displayed (Mobile Site)|| Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean select_the_amount_of_Traditional_Term_coverage_for_spouse_as_Mobile(String SBenefit)
			throws Exception {
		try {
			log.debug("Traditional benefit Coverage selected for Spouse (Mobile Site)");
			Spouse_Coverage_page_is_displayed_Mobile();

			if (traditionalAmountSpouse_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(traditionalPlusSpouse_Mobile, SBenefit,
						traditionalAmountSpouse_Mobile, traditionalMinusSpouse_Mobile);
			} else {
				traditionalArrowSelf_Mobile.click();
				Thread.sleep(1000);
				
				reuseMethod.select_Benefit_Amount_slider(traditionalPlusSpouse_Mobile, SBenefit,
						traditionalAmountSpouse_Mobile, traditionalMinusSpouse_Mobile);
				reuseMethod.scrollDown(traditionalArrowSelf_Mobile);
			}
			log.info("Traditional benefit Selected for Spouse (Mobile Site)|| Pass");
		}

		catch (Exception e) {
			log.error("Traditional benefit Coverage selected for Spouse (Mobile Site)|| Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean select_the_amount_of_Ten_Year_coverage_for_spouse_as_Mobile(String SBenefit1) throws Exception {
		try {
			log.debug("Ten year Coverage selected for Spouse (Mobile Site)");

			if (tenYrAmountSpouse_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(tenYrPlusSpouse_Mobile, SBenefit1, tenYrAmountSpouse_Mobile,
						tenYrMinusSpouse_Mobile);
			} else {
				tenYearArrowSpouse_Mobile.click();
				Thread.sleep(2000);
				
				reuseMethod.select_Benefit_Amount_slider(tenYrPlusSpouse_Mobile, SBenefit1, tenYrAmountSpouse_Mobile,
						tenYrMinusSpouse_Mobile);
				reuseMethod.scrollDown(tenYearArrowSpouse_Mobile);
			}
			log.info("Ten year Selected for Spouse (Mobile Site) || Pass");
		} catch (Exception e) {
			log.error("Ten year Coverage selected for Self (Mobile Site)|| Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean select_the_amount_of_Twenty_Year_coverage_for_spouse_as_Mobile(String SBenefit2) throws Exception {
		try {
			log.debug("Twenty Year Coverage selected for Spouse (Mobile Site)");

			if (twentyYrAmountSpouse_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(twentyYrPlusSpouse_Mobile, SBenefit2,
						twentyYrAmountSpouse_Mobile, twentyYrMinusSpouse_Mobile);
			} else {
				twentyYearArrowSpouse_Mobile.click();
				Thread.sleep(1000);
				
				reuseMethod.select_Benefit_Amount_slider(twentyYrPlusSpouse_Mobile, SBenefit2,
						twentyYrAmountSpouse_Mobile, twentyYrMinusSpouse_Mobile);
				reuseMethod.scrollDown(twentyYearArrowSpouse_Mobile);
			}
			log.info("Twenty Year Selected for Spouse (Mobile Site) || Pass");
		} catch (Exception e) {
			log.error("Twenty Year Coverage selected for Spouse (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean select_the_amount_of_Long_Term_coverage_for_spouse_as_Mobile(String SBenefit3, String SGDIwait,
			String SGDIduration) throws Exception {
		try {

			log.debug("Long Term Coverage selected for Spouse (Mobile Site)");

			if (longTermAmountSpouse_Mobile.isDisplayed()) {
				reuseMethod.select_Benefit_Amount_slider(longTermPlusSpouse_Mobile, SBenefit3,
						longTermAmountSpouse_Mobile, longTermMinusSpouse_Mobile);
			} else {
				longtermArrowSpouse_Mobile.click();
				Thread.sleep(2000);
				
				reuseMethod.select_Benefit_Amount_slider(longTermPlusSpouse_Mobile, SBenefit3,
						longTermAmountSpouse_Mobile, longTermMinusSpouse_Mobile);
				reuseMethod.scrollDown(longtermArrowSpouse_Mobile);
				
			}
			reuseMethod.dropDownselectbyvalue(longWaitingSpouse_Mobile, SGDIwait);
			reuseMethod.dropDownselectbyvalue(longBenefitSpouse_Mobile, SGDIduration);
			log.info("Long Term Coverage selected for Spouse (Mobile Site) || Pass");
		} catch (Exception e) {
			log.error("Long Term Coverage selected for Spouse (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}
		return true;
	}

	public boolean select_the_amount_of_Short_Term_coverage_for_spouse_as_Mobile(String SBenefit4, String SSDIwait,
			String SSDIduration1) throws Exception {
		try {
			log.debug("Short Term Coverage Selected for Spouse (Mobile Site)");

			if (shortTermAmountSpouse_Mobile.isDisplayed()) {

				reuseMethod.select_Benefit_Amount_slider(shortTermPlusSpouse_Mobile, SBenefit4,
						shortTermAmountSpouse_Mobile, shortTermMinusSpouse_Mobile);
			} else {
				shorttermArrowSpouse_Mobile.click();
				Thread.sleep(1000);
				

				reuseMethod.select_Benefit_Amount_slider(shortTermPlusSpouse_Mobile, SBenefit4,
						shortTermAmountSpouse_Mobile, shortTermMinusSpouse_Mobile);
				reuseMethod.scrollDown(shorttermArrowSpouse_Mobile);
			}

			reuseMethod.dropDownselectbyvalue(shortWaitingSpouse_Mobile, SSDIwait);
			reuseMethod.dropDownselectbyvalue(shortBenefitSpouse_Mobile, SSDIduration1);
			Thread.sleep(500);
			log.info("Short Term Coverage Selected for Spouse (Mobile Site)|| Pass");
		}

		catch (Exception e) {
			log.error("Short Term Coverage Selected for Self (Mobile Site) Fail" + e.getMessage());
			throw (e);
		}

		return true;
	}

	public boolean select_the_amount_of_All_coverage_for_spouse_as_Mobile(String SBenefit, String SBenefit1,
			String SBenefit2, String SBenefit3, String SBenefit4, String SGDIwait, String SGDIduration, String SSDIwait,
			String SSDIduration1) throws Throwable {

		try {
			log.debug("Select Coverage page details for Spouse in Mobile site");

			select_the_amount_of_Traditional_Term_coverage_for_spouse_as_Mobile(SBenefit);
			select_the_amount_of_Ten_Year_coverage_for_spouse_as_Mobile(SBenefit1);
			select_the_amount_of_Twenty_Year_coverage_for_spouse_as_Mobile(SBenefit2);
			select_the_amount_of_Long_Term_coverage_for_spouse_as_Mobile(SBenefit3, SGDIwait, SGDIduration);
			select_the_amount_of_Long_Term_coverage_for_spouse_as_Mobile(SBenefit4, SSDIwait, SSDIduration1);
			log.info("Select Coverage page details for Spouse in Mobile site || PASS");
			return true;
		} catch (Exception e) {
			log.error("Coverage page details for Spouse in Mobile site || Fail" + e.getMessage());
			throw (e);
		}
	}

	public boolean select_the_amount_of_child_coverage_as_TermLife_Mobile(String CBenefit) throws Exception {
		try {
			log.debug("Select Coverage page details for Child in Mobile site");

			reuseMethod.dropDownselectbyvalue(BenefitChild_Mobile, CBenefit);
			Thread.sleep(500);
			log.info("Child Coverage selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Coverage page details for Child in Mobile site || Fail" + e.getMessage());
			throw (e);
		}
	}
	
	public boolean child_coverage_page_is_dispalyed_Mobile() throws Exception {
		try {
			log.debug("Child coverage page is dispalyed in Mobile site");
			ChildCoverage_Page_Mobile.isDisplayed();
			reuseMethod.scrollDown(BenefitQuesChild_Mobile);
			Thread.sleep(500);
			log.info("Child coverage page is dispalyed in Mobile site || Pass");
			return true;
		} catch (Exception e) {
			log.error("Child coverage page is not dispalyed in Mobile site|| Fail" + e.getMessage());
			throw (e);
		}
	}

	public boolean validate_min_and_max_values_for_Long_Term_for_self_as_Mobile(String LTMin, String LTMax)
			throws Throwable {


		try {
			log.debug("Validate coverage range for Long Term for self");
			String amount = longTermAmountSelf_Mobile.getText();

			if (!longTermAmountSelf_Mobile.isDisplayed()) {
				longTermArrowSelf_Mobile.click();
				Thread.sleep(1000);
			}
				reuseMethod.scrollDown(longTermArrowSelf_Mobile);
				if (amount.equals(LTMin)) {
					System.out.println("Minimum is validated for Long Term");
				}
				reuseMethod.select_Benefit_Amount_slider(longTermPlusSelf_Mobile, LTMax, longTermAmountSelf_Mobile,
						longTermMinusSelf_Mobile);
				amount = longTermAmountSelf_Mobile.getText();
			
			if (amount.equals(LTMax)) {
				System.out.println("Maximum is validated for Long Term");
			}
			log.info("Validate coverage range for Long Term for self sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate coverage range for Long Term for self || Fail" + e.getMessage());
			
			throw (e);
		}
	}


	public boolean validate_min_and_max_values_for_Short_Term_for_self_Mobile(String STMin, String STMax)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Short Term for self");

			if (!shortTermAmountSelf_Mobile.isDisplayed()) {
				shortTermArrowSelf_Mobile.click();
				Thread.sleep(1000);
				
				reuseMethod.scrollDown(shortTermArrowSelf_Mobile);
				if (shortTermAmountSelf_Mobile.getText().equals(STMin)) {
					System.out.println("Minimum is validated for Short Term");
				}
				reuseMethod.select_Benefit_Amount_slider(shortTermPlusSelf_Mobile, STMax, shortTermAmountSelf_Mobile,
						shortTermMinusSelf_Mobile);
			}
			if (shortTermAmountSelf_Mobile.getText().equals(STMax)) {
				System.out.println("Maximum is validated for Short Term");
			}
			log.info("Validate coverage range for Short Term for self sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate coverage range for Short Term for self || Fail" + e.getMessage());
			
			throw (e);
		}
	}
	
	public boolean validate_min_and_max_values_for_Traditional_insurance_for_self_Mobile(String Min1, String Max1)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Traditional Insurance for self");

			if (!traditionalAmountSelf_Mobile.isDisplayed()) {
				traditionalArrowSelf_Mobile.click();
				Thread.sleep(1000);
				
				reuseMethod.scrollDown(traditionalArrowSelf_Mobile);
				if (traditionalAmountSelf_Mobile.getText().equals(Min1)) {
					System.out.println("Minimum is validated for Traditional Insurance");
				}
				reuseMethod.select_Benefit_Amount_slider(traditionalPlusSelf_Mobile, Max1, traditionalAmountSelf_Mobile,
						traditionalMinusSelf_Mobile);
			}
			if (traditionalAmountSelf_Mobile.getText().equals(Max1)) {
				System.out.println("Maximum is validated for Traditional Insurance");
			}
			log.info("Validate coverage range for Traditional Insurance for self sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate coverage range for Traditional Insurance for self || Fail" + e.getMessage());
			
			throw (e);
		}
	}
	
	public boolean validate_min_and_max_values_for_TenYR_for_self_Mobile(String TYMin, String TYMax)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Ten Year for self");

			if (!tenYrAmountSelf_Mobile.isDisplayed()) {
				tenYearArrowSelf_Mobile.click();
				Thread.sleep(1000);
				
				reuseMethod.scrollDown(tenYearArrowSelf_Mobile);
				if (tenYrAmountSelf_Mobile.getText().equals(TYMin)) {
					System.out.println("Minimum is validated for Ten Year");
				}
				reuseMethod.select_Benefit_Amount_slider(tenYearPlusSelf_Mobile, TYMax, tenYrAmountSelf_Mobile,
						tenYearMinusSelf_Mobile);
			}
			if (tenYrAmountSelf_Mobile.getText().equals(TYMax)) {
				System.out.println("Maximum is validated for Ten Year");
			}
			log.info("Validate coverage range for Ten Year for self sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate coverage range for Ten Year for self || Fail" + e.getMessage());
			
			throw (e);
		}
	}
	
	public boolean validate_min_and_max_values_for_TwentyYTL_for_self_Mobile(String TYMin, String TYMax)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Twenty Year for self");

			if (!twentyYrAmountSelf_Mobile.isDisplayed()) {
				twentyYearArrowSelf_Mobile.click();
				Thread.sleep(1000);
				
				reuseMethod.scrollDown(twentyYearArrowSelf_Mobile);
				if (twentyYrAmountSelf_Mobile.getText().equals(TYMin)) {
					System.out.println("Minimum is validated for Short Term");
				}
				reuseMethod.select_Benefit_Amount_slider(twentyYearPlusSelf_Mobile, TYMax, twentyYrAmountSelf_Mobile,
						twentyYearMinusSelf_Mobile);
			}
			if (twentyYrAmountSelf_Mobile.getText().equals(TYMax)) {
				System.out.println("Maximum is validated for Twenty year");
			}
			log.info("Validate coverage range for Twenty year for self sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate coverage range for Twenty year for self || Fail" + e.getMessage());
			
			throw (e);
		}
	}

	public boolean validate_min_and_max_values_for_Short_Term_for_spouse_to_Mobile(String STMin1, String STMax1)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Short Term for Spouse");
			String amount = shortTermAmountSpouse_Mobile.getText();

			if (!shortTermAmountSpouse_Mobile.isDisplayed()) {
				shorttermArrowSpouse_Mobile.click();
				Thread.sleep(1000);
			}
			reuseMethod.scrollDown(shorttermArrowSpouse_Mobile);
			if (amount.equals(STMin1)) {
				System.out.println("Minimum is validated for Short Term");
			}
			reuseMethod.select_Benefit_Amount_slider(shortTermPlusSpouse_Mobile, STMax1, shortTermAmountSpouse_Mobile,
					shortTermMinusSpouse_Mobile);
			amount = shortTermAmountSpouse_Mobile.getText();

			if (amount.equals(STMax1)) {
				System.out.println("Maximum is validated for Short Term");
			}
			log.info("Validate coverage range for Short Term for Spouse sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate coverage range for Short Term for Spouse || Fail" + e.getMessage());
		
			throw (e);
		}

	}

	public boolean validate_min_and_max_values_for_Long_Term_for_spouse_to_Mobile(String LTMin1, String LTMax1)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Long Term for Spouse");
			String amount = longTermAmountSpouse_Mobile.getText();

			if (!longTermAmountSpouse_Mobile.isDisplayed()) {
				
				longtermArrowSpouse_Mobile.click();
				Thread.sleep(1000);
				
			}
			reuseMethod.scrollDown(longtermArrowSpouse_Mobile);
				if (amount.equals(LTMin1)) {
					System.out.println("Minimum is validated for Long Term");
				}
				reuseMethod.select_Benefit_Amount_slider(longTermPlusSpouse_Mobile, LTMax1, longTermAmountSpouse_Mobile,
						longTermMinusSpouse_Mobile);
				amount = longTermAmountSpouse_Mobile.getText();

				
			if (amount.equals(LTMax1)) {
				System.out.println("Maximum is validated for Long Term");
			}
			log.info("Validate coverage range for Long Term for Spouse sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate coverage range for Long Term for Spouse || Fail" + e.getMessage());
			
			throw (e);
		}
	}
	
	public boolean validate_min_and_max_values_for_Traditional_Insurance_for_spouse_Mobile(String TMin1, String TMax1)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Traditional Insurance for Spouse");
			String amount = traditionalAmountSpouse_Mobile.getText();

			if (!traditionalAmountSpouse_Mobile.isDisplayed()) {

				traditionalArrowSpouse_Mobile.click();
				Thread.sleep(1000);
				
			}
			reuseMethod.scrollDown(traditionalArrowSpouse_Mobile);

			if (amount.equals(TMin1)) {
				System.out.println("Minimum is validated for Traditional Insurance in mobile application");
			}
			reuseMethod.select_Benefit_Amount_slider(traditionalPlusSpouse_Mobile, TMax1,
					traditionalAmountSpouse_Mobile, traditionalMinusSpouse_Mobile);
			amount = traditionalAmountSpouse_Mobile.getText();

			if (amount.equals(TMax1)) {
				System.out.println("Maximum is validated for Traditional Insurance Spouse");
			}
			log.info(
					"Validate coverage range for Traditional Insurance  for Spouse sucessfully in mobile application || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to validate coverage range for Traditional Insurance for Spouse in mobile application || Fail"
							+ e.getMessage());
			
			throw (e);
		}
	}
	
	public boolean validate_min_and_max_values_for_Ten_Year_Insurance_for_spouse_Mobile(String STYMin, String STYMax)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Ten year Insurance for Spouse");
			String amount = tenYrAmountSpouse_Mobile.getText();

			if (!tenYrAmountSpouse_Mobile.isDisplayed()) {

				tenYearArrowSpouse_Mobile.click();
				Thread.sleep(1000);
				
			}
			reuseMethod.scrollDown(tenYearArrowSpouse_Mobile);

			if (amount.equals(STYMin)) {
				System.out.println("Minimum is validated for Ten year Insurance in mobile application");
			}
			reuseMethod.select_Benefit_Amount_slider(tenYrPlusSpouse_Mobile, STYMax,
					tenYrAmountSpouse_Mobile, tenYrMinusSpouse_Mobile);
			amount = tenYrAmountSpouse_Mobile.getText();

			if (amount.equals(STYMax)) {
				System.out.println("Maximum is validated for Ten year Insurance Spouse");
			}
			log.info(
					"Validate coverage range for Ten year Insurance  for Spouse sucessfully in mobile application || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to validate coverage range for Ten year Insurance for Spouse in mobile application || Fail"
							+ e.getMessage());
			
			throw (e);
		}
	}
	
	public boolean validate_min_and_max_values_for_Twenty_Year_Insurance_for_spouse_Mobile(String STYMin, String STYMax)
			throws Throwable {

		try {
			log.debug("Validate coverage range for Twenty year Insurance for Spouse");
			String amount = twentyYrAmountSpouse_Mobile.getText();

			if (!twentyYrAmountSpouse_Mobile.isDisplayed()) {

				twentyYearArrowSpouse_Mobile.click();
				Thread.sleep(1000);
				
			}
			reuseMethod.scrollDown(twentyYearArrowSpouse_Mobile);

			if (amount.equals(STYMin)) {
				System.out.println("Minimum is validated for Twenty year Insurance in mobile application");
			}
			reuseMethod.select_Benefit_Amount_slider(twentyYrPlusSpouse_Mobile, STYMax,
					twentyYrAmountSpouse_Mobile, twentyYrMinusSpouse_Mobile);
			amount = twentyYrAmountSpouse_Mobile.getText();

			if (amount.equals(STYMax)) {
				System.out.println("Maximum is validated for Twenty year Insurance Spouse");
			}
			log.info(
					"Validate coverage range for Twenty year Insurance  for Spouse sucessfully in mobile application || Pass");
			return true;
		} catch (Exception e) {
			log.error(
					"Not able to validate coverage range for Twenty year Insurance for Spouse in mobile application || Fail"
							+ e.getMessage());
			
			throw (e);
		}
	}
	// WAEPA_CoveragePage***************************

	public boolean request_Coverage_page_is_displayed_to_user_and_Select_NO_for_Rider_questions_for_Self()
			throws Exception {

		try {
			log.debug("Select Rider Question as NO");
			ChrinicIllnessRider_Self_No.click();
			// Optional_Rider_No.click();
			log.info("Rider Question as NO selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Notable to select the Rider Question || Fail" + e.getMessage());
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}
	}

	public boolean verify_Coverage_Error_Message_in_Spouse_section_FiveYear() throws Exception {
		try {
			log.debug("Error Message is displayed on selecting incorrect spouse coverage amount");	
			reuseMethod.scrollDown(upArrow_Spouse_FiveYrProduct);
			spouseCoverageError1.isDisplayed();
			log.info("Error Message is displayed on selecting incorrect spouse coverage amount sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Error Message is displayed on selecting incorrect spouse coverage amount || Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	public boolean verify_Coverage_Error_Message_in_Spouse_section_TermLife() throws Exception {
		try {
			log.debug("Error Message is displayed on selecting incorrect spouse coverage amount");
			String spouseCoverageError=PropertyUtility.Load_MessageFile_Data("SpouseCoverageErrorMessage");
			
			reuseMethod.scrollDown(upArrow_Spouse_TermLifeProduct);
			spouseCoverageErrorMsg.isDisplayed();
			String actualError=spouseCoverageErrorMsg.getText();
			Assert.assertEquals(actualError, spouseCoverageError,"Error message does not match");
			log.info("Error Message is displayed on selecting incorrect spouse coverage amount sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Error Message is displayed on selecting incorrect spouse coverage amount || Fail"
					+ e.getMessage());
			throw (e);
		}

	}

	//AAFP
	public boolean verify_Spouse_amount_validation_on_Coverage_Page_for_TenYTL() throws Exception {
		try {
			log.debug("Error Message is displayed on selecting incorrect spouse coverage amount");
			String spouseCoverageError=PropertyUtility.Load_MessageFile_Data("SpouseCoverageErrorMessage");						
			CoverageErrorMsg_TenYTL_Spouse.isDisplayed();
			String actualError=CoverageErrorMsg_TenYTL_Spouse.getText();
			Assert.assertEquals(actualError, spouseCoverageError,"Error message does not match");
			log.info("Error Message is displayed on selecting incorrect spouse coverage amount sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Error Message is displayed on selecting incorrect spouse coverage amount || Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean verify_Spouse_Membership_mandatory_validation_message_on_Eligibility_page() throws Exception {
		try {
			log.debug("Error Message is displayed on eligibility page for Spouse Membership Validation");
			String spouseMemberShipError=PropertyUtility.Load_MessageFile_Data("SpouseMembershipValidation");						
			Validation_SpouseMember_EligibilityPage_Spouse.isDisplayed();
			String actualError=Validation_SpouseMember_EligibilityPage_Spouse.getText();
			Assert.assertEquals(actualError, spouseMemberShipError,"Error message does not match");
			log.info("Error Message is displayed on eligibility page sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Error Message is not displayed for Spouse Membership Validation || Fail"
					+ e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean Select_for_Rider_Only_question_for_self(String riderOnly) throws Exception {
		try {
			log.debug(" Select option for Rider only question for self");

			reuseMethod.selectSinglevalue(selfRiderOnlyNo, selfRiderOnlyYes, riderOnly);
			log.info(" Select option for Rider only question for self sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Select option for Rider only question for self || Fail"
							+ e.getMessage());
			throw (e);
		}
	}
	
	public Boolean validate_Coverage_related_Error_message() throws Throwable {
		try {
			log.debug("Validate Error Messege on Coverage Page");
			String Expected=PropertyUtility.Load_MessageFile_Data("CoverageErrorMessege");
			CoverageErrorMsg.isDisplayed();
			String actual=CoverageErrorMsg.getText();
			System.err.println("Error Messege on Coverage Page==="+actual);
			Assert.assertEquals(actual, Expected,"Error messege on Coverage is Not Displayed");
			
			 
			log.info("Error Messege on Coverage Page is validated successfully || Pass");
		    return true;
		}catch (Exception e) {
			log.error("Not able to Validate Error Messege on coverage Page || Fail"+e.getMessage());
			 throw(e);
		}
	}
	
	public Boolean validate_Coverage_related_Error_message_ACS() throws Throwable {
		try {
			log.debug("Validate Error Messege on Coverage Page");
			String Expected=PropertyUtility.Load_MessageFile_Data("CoverageErrorMessege_ACS");
			CoverageErrorMsg.isDisplayed();
			String actual=CoverageErrorMsg.getText();
			System.err.println("Error Messege on Coverage Page==="+actual);
			Assert.assertEquals(actual, Expected,"Error messege on Coverage is Not Displayed");
			
			 
			log.info("Error Messege on Coverage Page is validated successfully || Pass");
		    return true;
		}catch (Exception e) {
			log.error("Not able to Validate Error Messege on coverage Page || Fail"+e.getMessage());
			 throw(e);
		}
	}

	public boolean Request_coverage_page_is_displayed_to_user() throws Exception {
		try {
			log.debug("Request Coverage page is displayed to user");
			RequestCoveragePage.isDisplayed();
			log.info("Request Coverage page is displayed to user sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Request Coverage page is displayed to user || Fail" + e.getMessage());
			throw (e);
		}
	}

	public boolean select_to_Rider_only_question_for_spouse(String sRiderOnly) throws Exception {
		try {
			log.debug("Select option for Rider only question for Spouse");

			try {
				/*
				 * log.debug("Select Rider Question as NO for Spouse");
				 * ChrinicIllnessRider_Spouse_No.click(); //Optional_Rider_No.click();
				 * log.info("Rider Question as NO selected sucessfully || Pass");
				 */

				reuseMethod.selectSinglevalue(spouseRiderOnlyNo, spouseRiderOnlyYes, sRiderOnly);
				log.info("Select option for Rider only question for Spouse sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Notable to select the Rider Question || Fail" + e.getMessage());
				screenShotUtility.GetScreenShot(driver);
				throw (e);
			}

			// reuseMethod.selectSinglevalue(spouseRiderOnlyNo, spouseRiderOnlyYes,
			// sRiderOnly);
			// log.info("Select option for Rider only question for Spouse sucessfully ||
			// Pass");
			// return true;
		} catch (Exception e) {
			log.error("Select option for Rider only question for Spouse || Fail" + e.getMessage());
			throw (e);
		}
	}

	public boolean Select_BOTH_rider_Checkbox_COLA_and_CDB_Spouse_Mobile() throws Exception {
		try {
			log.debug("Select check box for BOTH riders for Self in Mobile site");
			COLAcheckboxSpouse_Mobile.click();
			CDBcheckboxSpouse_Mobile.click();
			Thread.sleep(500);
			log.info("Selected check box for BOTH riders for self in Mobile Site || Pass");

			return true;
		} catch (Exception e) {
			log.error("Not able to select check box for BOTH riders for self in Mobile Site || Fail" + e.getMessage());
			throw (e);
		}

	}

	// WAEPA method for Optional rider
	public boolean select_to_Optional_Rider_question_for_Self(String OptionalRider) throws Exception {
		try {
			log.debug("Request Coverage page is displayed to user And Select optional Rider question for self");
			
				
			reuseMethod.selectSinglevalue(OptionalRider_Self_No, OptionalRider_Self_Yes, OptionalRider);
			log.info(
					"Request Coverage page is displayed to user And Select optional Rider question for self sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Request Coverage page is displayed to user And Select optional Rider question for self || Fail"
					+ e.getMessage());
			throw (e);
		}
	}

	public boolean select_to_Optional_Rider_question_for_Spouse(String sOptionalRider) throws Exception {
		try {
			log.debug("Request Coverage page is displayed to user And Select optional Rider question for Spouse");

			reuseMethod.selectSinglevalue(OptionalRider_Spouse_No, OptionalRider_Spouse_Yes, sOptionalRider);
			log.info(
					"Request Coverage page is displayed to user And Select optional Rider question for Spouse sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Request Coverage page is displayed to user And Select optional Rider question for Spouse || Fail"
					+ e.getMessage());
			throw (e);
		}
	}

	
	public boolean verify_that_the_Optional_rider_is_disabled_for_Spouse() throws Exception {

		try {
			log.debug("Selects Optional rider is disabled for Spouse");
			boolean Actual_Rider_Yes=OptionalRider_Spouse_Yes.isEnabled();
			boolean Actual_Rider_No=OptionalRider_Spouse_No.isEnabled();
			Assert.assertFalse(Actual_Rider_Yes, "Optional rider YES is Enabled for Spouse || Bug");
			Assert.assertFalse(Actual_Rider_No, "Optional rider NO is Enabled for Spouse || Bug");

			log.info("Optional rider is disabled for Spouse is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects optional rider is disabled for Spouse || Fail" + e.getMessage());
			throw (e);
		}

	}
	
	public boolean verify_that_the_optional_rider_is_enabled_for_Spouse() throws Exception {

		try {
			log.debug("Selects Optional rider is enabled for Spouse");
			boolean Actual_Rider_Yes=OptionalRider_Spouse_Yes.isEnabled();
			boolean Actual_Rider_No=OptionalRider_Spouse_No.isEnabled();
			Assert.assertTrue(Actual_Rider_Yes, "Optional rider YES is Disabled for Spouse || Bug");
			Assert.assertTrue(Actual_Rider_No, "Optional rider NO is Disabled for Spouse || Bug");

			log.info("Optional rider is enabled for Spouse is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Optional rider is enabled for Spouse || Fail" + e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean select_YES_to_Rider_only_question_for_Self() throws Exception {

		try {
			log.debug("Select Rider Question as Yes for self");
			ChrinicIllnessRider_Self_Yes.click();
			// Optional_Rider_No.click();
			log.info("Rider Question as Yes selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Notable to select the Rider Question || Fail" + e.getMessage());
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}
	}

	public boolean Select_NO_for_optional_Rider_questions() throws Exception {

		try {
			log.debug("Select Optional Rider Question as NO");
			OptionalRider_Self_No.click();
			log.info("Optional Rider Question as NO selected sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Notable to select the Optional Rider Question || Fail" + e.getMessage());
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}
	}
	
	public boolean request_Coverage_page_is_displayed_to_user_and_Verify_that_Quick_Decision_is_Unavailable_under_TermLife_for_Self() throws Exception {

		
			log.debug("Validate that Quick Decision is Unavailable for Term Life Self");
			try {
				if(QuickDecisionOption_Self.getText().equalsIgnoreCase("UNAVAILABLE"))
				{
					reuseMethod.scrollDown(QuickDecisionOption_Self);
					System.out.println("Quick Decision is::"+QuickDecisionOption_Self.getText());
					log.info("Quick Decision is Unavailable for Term Life Self");
					System.out.println("Quick Decision is Unavailable for Term Life Self");
					return true;
				}
			}catch (NoSuchElementException e) {
				log.error("Quick Decision is Available for Term Life Self");
				System.out.println("Quick Decision is Available for Term Life Self");
				screenShotUtility.GetScreenShot(driver);
				throw (e);
			}
			return false;
			
		}
	public boolean Verify_that_Quick_Decision_is_Available_under_TermLife_for_Self() throws Exception {

		
		log.debug("Validate that Quick Decision is Available for Term Life Self");
		try {
			if(QuickDecisionOption_Self.getText().equalsIgnoreCase("AVAILABLE"))
			{
				reuseMethod.scrollDown(QuickDecisionOption_Self);
				System.out.println("Quick Decision is::"+QuickDecisionOption_Self.getText());
				log.info("Quick Decision is Available for Term Life Self");
				System.out.println("Quick Decision is Available for Term Life Self");
				return true;
			}
		}catch (Exception e) {
			log.error("Quick Decision is not  Available for Term Life Self");
			System.out.println("Quick Decision is not Available for Term Life Self");
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}
		return false;
		
	}
	public boolean verify_that_Quick_Decision_is_Unavailable_under_TermLife_for_Spouse() throws Exception {

		log.debug("Validate that Quick Decision is Unavailable for Term Life Spouse");
		try {
			if(QuickDecisionOption_Spouse.getText().equalsIgnoreCase("UNAVAILABLE"))
			{
				reuseMethod.scrollDown(QuickDecisionOption_Spouse);
				System.out.println("Quick Decision is::"+QuickDecisionOption_Spouse.getText());
				log.info("Quick Decision is Unavailable for Term Life Spouse");
				System.out.println("Quick Decision is Unavailable for Term Life Spouse");
				return true;
			}
		}catch (Exception e) {
			log.error("Quick Decision is Available for Term Life Spouse");
			System.out.println("Quick Decision is Available for Term Life Spouse");
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}
		return false;
	}
	public boolean verify_that_Quick_Decision_is_Available_under_TermLife_for_Spouse() throws Exception {

		log.debug("Validate that Quick Decision is available for Term Life Spouse");
		try {
			if(QuickDecisionOption_Spouse.getText().equalsIgnoreCase("AVAILABLE"))
			{
				reuseMethod.scrollDown(QuickDecisionOption_Spouse);
				System.out.println("Quick Decision is::"+QuickDecisionOption_Spouse.getText());
				log.info("Quick Decision is available for Term Life Spouse");
				System.out.println("Quick Decision is available for Term Life Spouse");
				return true;
			}
		}catch (Exception e) {
			log.error("Quick Decision is UnAvailable for Term Life Spouse");
			System.out.println("Quick Decision is Unvailable for Term Life Spouse");
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}
		return false;
	}
	
	public boolean verify_that_Quick_Decision_is_Unavailable_for_TermLife_Self() throws Exception {

		
		log.debug("Validate that Quick Decision is Unavailable for Term Life Self");
		try {
			if(QuickDecisionTermLife_Self.getText().equalsIgnoreCase("UNAVAILABLE"))
			{
				reuseMethod.scrollDown(QuickDecisionTermLife_Self);
				System.out.println("Quick Decision is::"+QuickDecisionTermLife_Self.getText());
				log.info("Quick Decision is Unavailable for Term Life Self");
				System.out.println("Quick Decision is Unavailable for Term Life Self");
				return true;
			}
		}catch (NoSuchElementException e) {
			log.error("Quick Decision is Available for Term Life Self");
			System.out.println("Quick Decision is Available for Term Life Self");
			screenShotUtility.GetScreenShot(driver);
			throw (e);
		}
		return false;
		
	}
public boolean verify_that_Quick_Decision_is_Available_for_TermLife_Self() throws Exception {

	
	log.debug("Validate that Quick Decision is Available for Term Life Self");
	try {
		if(QuickDecisionTermLife_Self.getText().equalsIgnoreCase("AVAILABLE"))
		{
			reuseMethod.scrollDown(QuickDecisionTermLife_Self);
			System.out.println("Quick Decision is::"+QuickDecisionTermLife_Self.getText());
			log.info("Quick Decision is Available for Term Life Self");
			System.out.println("Quick Decision is Available for Term Life Self");
			return true;
		}
	}catch (Exception e) {
		log.error("Quick Decision is not  Available for Term Life Self");
		System.out.println("Quick Decision is not Available for Term Life Self");
		screenShotUtility.GetScreenShot(driver);
		throw (e);
	}
	return false;
	
}
	public boolean selects_Benefit_Amount_for_Self_as_under_TermLife(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of Term Life Insurance Products");
			if(abeSelfBenefitAmountTermLife.isDisplayed())
			{
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TermLifeProduct, Benefit, abeSelfBenefitAmountTermLife,
						downArrow_Self_TermLifeProduct);
			}
			else {
				TermLifeInsuranceLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TermLifeProduct, Benefit, abeSelfBenefitAmountTermLife,
						downArrow_Self_TermLifeProduct);
			}
			
			log.info("Amount selected for Self of Term Life Insurance Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of Term Life Insurance Product || Fail" + e.getMessage());
			throw (e);
		}

	}
	public boolean checks_Chronic_Illness_Rider_for_Self_checkbox_under_TermLife() throws Exception {

		try {
			log.debug("Selects Chronic Illness Rider for Term Life Insurance for Self");
			ChronicRider_TermLifeSelf.isDisplayed();
			ChronicRider_TermLifeSelf.click();

			log.info("Chronic Illness Rider for Term Life Insurance for Self is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Chronic Illness Rider for Term Life Insurance for Self|| Fail" + e.getMessage());
			throw (e);
		}

	}
	
	public boolean selects_CIR_portion_for_Self_as_under_TermLife(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of Term Life Insurance Products");
			if(abeSelfBenefitAmountTermLifeRider.isDisplayed())
			{
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TermLifeProductRider, Benefit, abeSelfBenefitAmountTermLifeRider,
						downArrow_Self_TermLifeProductRider);
			}
			else {
				TermLifeInsuranceLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_TermLifeProductRider, Benefit, abeSelfBenefitAmountTermLifeRider,
						downArrow_Self_TermLifeProductRider);
			}
			
			log.info("Amount selected for Self of Term Life Insurance Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of Term Life Insurance Product || Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Spouse_as_under_TermLife(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Spouse of Term Life Insurance Products");
			if(abeSpouseBenefitAmountTermLife.isDisplayed())
			{
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TermLifeProduct, Benefit, abeSpouseBenefitAmountTermLife,
						downArrow_Spouse_TermLifeProduct);
			}
			else {
				TermLifeInsuranceLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TermLifeProduct, Benefit, abeSpouseBenefitAmountTermLife,
						downArrow_Spouse_TermLifeProduct);
			}
			
			log.info("Amount selected for Spouse of Term Life Insurance Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Term Life Insurance Product || Fail" + e.getMessage());
			throw (e);
		}

	}
	public boolean checks_CIR_checkbox_for_Spouse() throws Exception {

		try {
			log.debug("Selects Chronic Illness Rider for Term Life Insurance for Spouse");
			ChronicRider_TermLifeSpouse.isDisplayed();
			ChronicRider_TermLifeSpouse.click();

			log.info("Chronic Illness Rider forTerm Life Insurance for Spouse is selected  sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Selects Chronic Illness Rider for Term Life Insurance for Spouse|| Fail" + e.getMessage());
			throw (e);
		}

	}
	
	public boolean selects_CIR_portion_for_Spouse_as_under_TermLife(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Spouse of Term Life Insurance Products");
			if(abeSpouseBenefitAmountTermLifeRider.isDisplayed())
			{
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TermLifeProductRider, Benefit, abeSpouseBenefitAmountTermLifeRider,
						downArrow_Spouse_TermLifeProductRider);
			}
			else {
				TermLifeInsuranceLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_TermLifeProductRider, Benefit, abeSpouseBenefitAmountTermLifeRider,
						downArrow_Spouse_TermLifeProductRider);
			}
			
			log.info("Amount selected for Spouse of Term Life Insurance Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Term Life Insurance Product || Fail" + e.getMessage());
			throw (e);
		}

	}

	public boolean selects_Benefit_Amount_for_Child_as_under_TermLife(String CBenefit) throws Exception {

		try {
			log.debug("Select Benefit Amount for Child of Term Life Insurance  Products");
			reuseMethod.scrollDown(BenefitAmountChildTermLifeProduct);
			reuseMethod.dropDownselectbyvalue(BenefitAmountChildTermLifeProduct, CBenefit);
			log.info("Amount selected for Child of Term Life Insurance  Product sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Child of Term Life Insurance  Product || Fail" + e.getMessage());
			throw (e);
		}

	}
	public boolean selects_Waiting_Period_for_Self_as_under_DII(String Period) throws Exception {

		try {
			log.debug("Select Waiting Period for Disability Income Insurance Products");
			reuseMethod.scrollDown(WaitingPeriodDII_Self);
			Thread.sleep(1000);
			reuseMethod.dropDownselectbyvalue(WaitingPeriodDII_Self,Period);
			log.info("Waiting Period for Disability Income Insurance Products for Self is selected sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Select Waiting Period for Disability Income Insurance Products || Fail" + e.getMessage());
			throw (e);
		}

	}
	public boolean selects_Monthly_Benefit_Amount_for_Self_as_under_DII(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of DII Insurance Products");
			if(abeSelfBenefitAmountDII.isDisplayed())
			{
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_DII, Benefit, abeSelfBenefitAmountDII,
						downArrow_Self_DII);
			}
			else {
				DisabilityIncomeInsuranceLabel.click();
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_DII, Benefit, abeSelfBenefitAmountDII,
						downArrow_Self_DII);
			}
			
			log.info("Amount selected for Self of DII Insurance Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of DII Insurance Product || Fail" + e.getMessage());
			throw (e);
		}

	}
	
	public boolean AAFP_selects_Monthly_Benefit_Amount_for_Self_as_under_DII(String Benefit) throws Exception {

		try {

			log.debug("Select Benefit Amount for Self of DII Insurance Products");
			DisabilityInsurance_Label.click();
			reuseMethod.scrollDown(BenefitOptionDII_Self_AAFP);
			reuseMethod.dropDownselectbyvalue(BenefitOptionDII_Self_AAFP, Benefit);
			
			log.info("Amount selected for Self of DII Insurance Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Self of DII Insurance Product || Fail" + e.getMessage());
			throw (e);
		}

	}
	
	
	public boolean selects_Benefit_Option_for_Self_as_under_DII(String Period) throws Exception {

		try {
			log.debug("Select Waiting Period for Disability Income Insurance Products");
			Thread.sleep(1000);
			reuseMethod.dropDownselectbyvalue(BenefitOptionDII_Self, Period);
			log.info("Waiting Period for Disability Income Insurance Products for Self is selected sucessfully  || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Select Waiting Period for Disability Income Insurance Products || Fail" + e.getMessage());
			throw (e);
		}

	}
	
//AAFP
	
	public boolean validates_under_DII_the_Benefit_Slider_Range_for_Self_as_to(String Min_DII, String Max_DII) throws Exception{
		
		try {
				log.debug("Validate Benefit Slider Ranges of Self for DII Products");
				String MinAmt= MinAmount_DIISelf.getText();
				System.out.println("Actual Min Amount:"+MinAmt);
				if(MinAmt.equalsIgnoreCase(Min_DII))
				{
					System.out.println("Minimum Range for Self of DII Product is validated");
				}
				String MaxAmt= MaxAmount_DIISelf.getText();
				System.out.println("Actual Max Amount:"+MaxAmt);
				
				if(MaxAmt.equalsIgnoreCase(Max_DII))
				{
					System.out.println("Maximum Range for Self of DII is validated");
				}
				log.info("Benefit Slider Ranges for Self of DII Products are validated sucessfully || Pass");
				return true;
			}catch (Exception e) {
				log.error("Not able to Validate Benefit Slider Ranges for Self of DII || Fail"+e.getMessage());
				
				throw(e);
		}
		
	}

	
public boolean selects_Inflation_Protection_Option_Rider_under_DII() throws Exception{
		
		try {
				log.debug("Validate Inflation Protection Rider of Self for DII Products");
				
				InflationProtectionRider_Self_AAFP.click();
				
				log.info("Inflation Protection Rider for Self of DII Products are validated sucessfully || Pass");
				return true;
			}catch (Exception e) {
				log.error("Not able to Validate Inflation Protection Rider for Self of DII || Fail"+e.getMessage());
				
				throw(e);
		}
		
	}

public boolean validate_that_Child_Name_is_Eligible_for_Child_coverage_Mobile(String CNameEli) throws Throwable {
    
	try {
		log.debug("Validate that Child Name is eligibile for product");
		boolean check=false;
String cName=EligibleChildName_Mob.getText();
String []cNameList=cName.split(",");

for(int i=0;i<cNameList.length;i++)
{

if(cNameList[i].equalsIgnoreCase(CNameEli))
{
check=true;
cName=cNameList[i];
}
}

if(check==true)
{
Assert.assertEquals(cName, CNameEli,"Child Name does not match");
}
			log.info("Validated that Child Name is eligibile for product || Pass");
	return true;
	}catch (Exception e) {
		log.error("Not able to validate that Child Name is eligibile for product || Fail"+e.getMessage());
		 throw(e);
		
	}
}



public boolean validate_that_is_Child_coverage_amount_dropdown_Mobile(String CAmount) throws Throwable {
	try {
		log.debug("Validate that child coverage amount is correct");
		
	List<WebElement> ChildCoverageAmnt=	reuseMethod.dropDowngetOption(BenefitChild_Mobile);
	
	for(WebElement element: ChildCoverageAmnt)  
    {
        String values = element.getText();
      
        String val=values.replaceAll("$", "").replaceAll(",", "");
        if(val.equalsIgnoreCase(CAmount))
        {
        	Assert.assertEquals(val, CAmount,"Child coverage amount does not match");
        }
       
    }
	/*String ChildCoverageAmnt=BenefitChild_Mobile.getText();
	String CoverageAmnt[]=ChildCoverageAmnt.split("\\n");
	ChildCoverageAmnt=CoverageAmnt[1];
	
	int index=ChildCoverageAmnt.indexOf("$");
	
	String ChildCoverageAmnt1=ChildCoverageAmnt.substring(index+1);
	String ChildCoverageAmnt2=ChildCoverageAmnt1.replaceAll(",","");
	System.out.println("Amount on website is: "+ChildCoverageAmnt2);*/
	
			log.info("Validated that child coverage amount is correct || Pass");
	return true;
	}catch (Exception e) {
		log.error("Not able to validate that child coverage amount is correct || Fail"+e.getMessage());
		 throw(e);
		
	} 
}



public boolean validates_Change_in_Coverage_Option_for_Spouse_is_not_displayed() throws Throwable {
	try {
		log.debug("Validates Change in Coverage Option for Spouse is not displayed");
		reuseMethod.scrollDown(newCoverageSpouse_Traditional);
		Assert.assertFalse(changeCoverageSpouse_Traditional.isDisplayed(), "Change in Coverage option for spouse is displayed");
		log.info("Validated Change in Coverage Option for Spouse is not displayed sucessfully || Pass");
		return true;
	}catch (NoSuchElementException e) {
		log.error("Not able to validates Change in Coverage Option for Spouse is not displayed || Fail"+e.getMessage());
		System.out.println("Change in Coverage Option for Spouse is not displayed");
		throw(e);
}
}


public boolean validates_under_TermLife_the_Benefit_Slider_Range_for_CIR_as_to_for_Self(String Min, String Max)
		throws Exception {

	try {
		log.debug("Validate Benefit Slider Ranges for TermLife Products");
		String MinAmt = MinAmount_TermLifeSelfRider.getText();
		System.out.println("Actual Min Amount Self:" + MinAmt);
		if (MinAmt.equalsIgnoreCase(Min)) {
			System.out.println("Minimum Range for CIR is validated");
		}
		String MaxAmt = MaxAmount_TermLifeSelfRider.getText();
		System.out.println("Actual Max Amount self:" + MaxAmt);

		if (MaxAmt.equalsIgnoreCase(Max)) {
			System.out.println("Maximum Range for CIR is validated");
		}
		log.info("Benefit Slider Ranges for CIR  are validated sucessfully || Pass");
		return true;
	} catch (Exception e) {
		log.error("Not able to Validate Benefit Slider Ranges for CIR || Fail"
				+ e.getMessage());
		throw (e);
	}
}
	public boolean validates_under_TermLife_the_Benefit_Slider_Range_for_CIR_as_to_for_Spouse(String SMin_CIR, String SMax_CIR)
			throws Exception {

		try {
			log.debug("Validate CIR Slider Ranges for TermLife Products for Spouse");
			String MinAmt = MinAmount_TermLifeSpouseRider.getText();
			System.out.println("Actual Min Amount Self:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(SMin_CIR)) {
				System.out.println("Minimum Range for CIR is validated");
			}
			String MaxAmt = MaxAmount_TermLifeSpouseRider.getText();
			System.out.println("Actual Max Amount self:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(SMax_CIR)) {
				System.out.println("Maximum Range for CIR is validated");
			}
			log.info("Benefit Slider Ranges for CIR  are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for CIR || Fail"
					+ e.getMessage());
			throw (e);
		}

}

	
	public boolean validates_Benefit_Amount_for_Child_as_under_TermLife(String cBenefit)
			throws Exception {

		try {
			log.debug("Validate Benefit Amount for Child under TermLife");
			String expected=cBenefit.replaceAll(",","");
			String expectedAmnt=expected.replaceAll("$", "");
			
				String actualvalue=BenefitAmountChildTermLifeProduct_Label.getText();
			String actualAmnt=actualvalue.replaceAll("$", "");
			actualAmnt=actualAmnt.replaceAll(",","");
			Assert.assertEquals(actualAmnt, expectedAmnt,"Benefit Amount for Child does not match");
			
			log.info("Validated Benefit Amount for Child under TermLife sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Benefit Amount for Child under TermLife || Fail"
					+ e.getMessage());
			throw (e);
		}

}
	
	public boolean validates_Benefit_Amount_for_Child_as_under_TenYTL_as_label(String cBenefit)
			throws Exception {

		try {
			log.debug("Validate Benefit Amount for Child under TenYTL");
			String expected=cBenefit.replaceAll(",","");
			
			if(expected.contains("$"))
			{
				expected=expected.substring(expected.indexOf("$")+1);
			}
				String actualvalue=BenefitAmountChild_TenYTL_Label.getText();
			String actualAmnt=actualvalue.substring(actualvalue.indexOf("$")+1);
			actualAmnt=actualAmnt.replaceAll(",","");
			Assert.assertEquals(actualAmnt, expected,"Benefit Amount for Child does not match");
			
			log.info("Validated Benefit Amount for Child under TenYTL sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Benefit Amount for Child under TenYTL || Fail"
					+ e.getMessage());
			throw (e);
		}

}
	public boolean validates_Benefit_Amount_for_Child_as_under_TwentyYTL_as_label(String cBenefit)
			throws Exception {

		try {
			log.debug("Validate Benefit Amount for Child under TwentyYTL");
			String expected=cBenefit.replaceAll(",","");
			
			if(expected.contains("$"))
			{
				expected=expected.substring(expected.indexOf("$")+1);
			}
				String actualvalue=BenefitAmount_Child_20YrProduct_label.getText();
			String actualAmnt=actualvalue.substring(actualvalue.indexOf("$")+1);
			actualAmnt=actualAmnt.replaceAll(",","");
			Assert.assertEquals(actualAmnt, expected,"Benefit Amount for Child does not match");
			
			log.info("Validated Benefit Amount for Child under TwentyYTL sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to validate Benefit Amount for Child under TwentyYTL || Fail"
					+ e.getMessage());
			throw (e);
		}

}
	public boolean selects_Benefit_Amount_for_Self_as_under_FifteenYr(String Benefit2) throws Exception {

		try {
			log.debug("Select Benefit Amount for Self of Fifteen Year");
			if (!SelfBenefitAmount15Yr.isDisplayed()) {
				
				FifteenYrLabel.click();
				Thread.sleep(2000);
				
			} 
				
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_FifteenYrProduct, Benefit2,
						SelfBenefitAmount15Yr, downArrow_Self_FifteenYrProduct);
			
			log.info("Amount selected for Self  Fifteen Year Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for self of Fifteen Year Product|| Fail"
					+ e.getMessage());

			throw (e);
		}

	}
	
	public boolean validates_under_FifteenYTL_the_Benefit_Slider_Range_for_Self(String Min, String Max)
			throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for self for Fifteen year Products");
			String MinAmt = FifteenMin_AmntSelf.getText();
			System.out.println("Actual Min Amount Self:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for self for  Fifteen year is validated");
			}
			String MaxAmt = FifteenMax_AmntSelf.getText();
			System.out.println("Actual Max Amount self:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for self for  Fifteen year is validated");
			}
			log.info("Benefit Slider Ranges for self for Fifteen year are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Fifteen year for self|| Fail"
					+ e.getMessage());
			throw (e);
		}
	}
	
	public boolean selects_benefit_amount_for_Fifteen_Year_Product_Spouse_as(String sBenefit) throws Exception {

		try {
		log.debug("Select Benefit Amount for Spouse of Fifteen Years Products");
		if(!spouseBenefitAmount15Yr.isDisplayed())
		{
		
			FifteenYrLabel.click();
			Thread.sleep(2000);
		}
			reuseMethod.select_Benefit_Amount_slider(upArrow_Spouse_FifteenYrProduct, sBenefit, spouseBenefitAmount15Yr,
					downArrow_Spouse_FifteenYrProduct);
		
			
			
			log.info("Amount selected for Spouse of Fifteen Years Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of Fifteen Year Product|| Fail" + e.getMessage());
			throw (e);
		}

	}
	
	public boolean validates_under_FifteenYTL_the_Benefit_Slider_Range_for_Spouse(String Min, String Max)
			throws Exception {

		try {
			log.debug("Validate Benefit Slider Ranges for Fifteen year Products for spouse");
			String MinAmt = FifteenMin_AmntSpouse.getText();
			System.out.println("Actual Min Amount Spouse:" + MinAmt);
			if (MinAmt.equalsIgnoreCase(Min)) {
				System.out.println("Minimum Range for Fifteen year is validated for spouse");
			}
			String MaxAmt = FifteenMax_AmntSpouse.getText();
			System.out.println("Actual Max Amount Spouse:" + MaxAmt);

			if (MaxAmt.equalsIgnoreCase(Max)) {
				System.out.println("Maximum Range for Fifteen year is validated for spouse");
			}
			log.info("Benefit Slider Ranges for Fifteen year for spouse are validated sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to Validate Benefit Slider Ranges for Fifteen year for spouse || Fail"
					+ e.getMessage());
			throw (e);
		}
	}
	
	
	public boolean selects_Benefit_Amount_for_Spouse_as_under_ADnD_from_dropdown(String sBenefit) throws Exception {

		try {
		log.debug("Select Benefit Amount for Spouse of ADnD");
		if(!spouseBenefitAmount_ADnD.isDisplayed())
		{
		
			AccidentalDeathLabel.click();
			Thread.sleep(2000);
		}
		
			reuseMethod.dropDownselectbyvalue(spouseBenefitAmount_ADnD, sBenefit);
			
			log.info("Amount selected for Spouse of ADnD Product sucessfully || Pass");
			return true;
		} catch (Exception e) {
			log.error("Not able to select the benefit Amount for Spouse of ADnD Product|| Fail" + e.getMessage());
			throw (e);
		}

	}
	
	
	   public boolean validates_under_ADnD_the_Benefit_Amounts_Listed_for_spouse(String ADnD_sAmount) throws Throwable {
		try {
			log.debug("Validates under ADnD the Benefit Amounts Listed for spouse");
			List<WebElement> SpsAmnt=reuseMethod.dropDowngetOption(spouseBenefitAmount_ADnD);
			ADnD_sAmount=ADnD_sAmount.replaceAll("$", "").replaceAll(",", "");
			for(WebElement e:SpsAmnt)
			{
				if(!e.getText().equalsIgnoreCase("select"))
				{
					
				String ActualAmnt=e.getText();
				if(ActualAmnt.equals(ADnD_sAmount))
				{
				int index=ActualAmnt.indexOf("$");
				ActualAmnt=	ActualAmnt.substring(index+1).replaceAll(",", "");
				System.out.println("Amount matched, Actual Amount in dropdown is: "+ActualAmnt);
				}}
			}	
				log.info("Validated under ADnD the Benefit Amounts Listed for spouse sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to validate under ADnD the Benefit Amounts Listed for spouse|| Fail" + e.getMessage());
				throw (e);
			}
		
	   }
	   
	   public boolean selects_Future_Purchase_Option_rider_under_LTD_product() throws Exception {

			try {
				log.debug("Select Future Purchase Option Rider for Long term Disability Product");
				reuseMethod.scrollDown(abeSelfBenefitAmountLTDProduct);
				Thread.sleep(1000);
				FPO_Self_LTD.isDisplayed();
				FPO_Self_LTD.click();
				Thread.sleep(500);

				log.info("Future Purchase Option Rider for Long term Disability Product is selected  sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select Future Purchase Option Rider for Long term Disability Product|| Fail"
						+ e.getMessage());

				throw (e);
			}

		}
	   
	 
	   public boolean selects_FPO_Rider_Benefit_Amount_for_Self_as(String Benefit) throws Throwable {
		   
		   try
		   {
			   log.debug("Selects FPO Rider Benefit Amount for Self");
			if(!FPO_Self_SliderAmntLTD.isDisplayed())
			{
			
				LongTermDisabilityLabel.click();
				Thread.sleep(2000);
			}
				reuseMethod.select_Benefit_Amount_slider(upArrow_Self_LTDFPO, Benefit, FPO_Self_SliderAmntLTD,
						downArrow_Self_LTDFPO);
				
				log.info("Selects FPO Rider Benefit Amount for Self sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select FPO Rider Benefit Amount for Self|| Fail" + e.getMessage());
				throw (e);
			}
	   }
	   
	   public boolean validates_Benefit_Amount_for_Spouse_as_under_LTD(String SBenefit) throws Throwable {	  
		   try
		   {
			   log.debug("Validates Benefit Amount for Spouse under LTD");
			   if(!BenefitAmnt_SpouseLTD.isDisplayed())
			   {
				   LongTermDisabilityLabel.click();
			   }
			  String actual_Amount=BenefitAmnt_SpouseLTD.getAttribute("value");
			  if(SBenefit.contains("$"))
				{
				SBenefit=SBenefit.substring(1);
				}
				SBenefit=SBenefit.replaceAll(",", "");
				
				actual_Amount=actual_Amount.substring(1);
				actual_Amount=actual_Amount.replaceAll(",", "");
					
			   Assert.assertEquals(actual_Amount, SBenefit,"Benefit Amount for spouse does not match under LTD");
				log.info("Validated Benefit Amount for Spouse under LTD sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to validate Benefit Amount for Spouse under LTD|| Fail" + e.getMessage());
				throw (e);
			}
	   }
	   
	   public boolean validates_under_STD_the_Benefit_Slider_Range_for_Self(String Min, String Max)
				throws Exception {

			try {
				log.debug("Validate Benefit Slider Ranges for self for STD Product");
				String MinAmt = MinAmount_STDSelf.getText();
				System.out.println("Actual Min Amount Self:" + MinAmt);
				if (MinAmt.equalsIgnoreCase(Min)) {
					System.out.println("Minimum Range for self for STD is validated");
				}
				String MaxAmt = MaxAmount_STDSelf.getText();
				System.out.println("Actual Max Amount self:" + MaxAmt);

				if (MaxAmt.equalsIgnoreCase(Max)) {
					System.out.println("Maximum Range for self for STD is validated");
				}
				log.info("Benefit Slider Ranges for self forSTD are validated sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to Validate Benefit Slider Ranges for STD for self|| Fail"
						+ e.getMessage());
				throw (e);
			}
		}
	   

	   public boolean validates_Wait_Period_for_Self_as_under_OOEDI(String wPeriod) throws Throwable {
		   try
		   {
			   log.debug("Validates Wait Period for Self as under OOEDI");
			  String ActualAmnt=waitPrd_OOEDISelf.getText().trim();
			  String Expected=wPeriod.trim();
			   Assert.assertEquals(ActualAmnt, Expected,"Wait Period for Self does not match under OOEDI");
				log.info("Validated Wait Period for Self as under OOEDI sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to validate Wait Period for Self as under OOEDI|| Fail" + e.getMessage());
				throw (e);
			}
	   }
	   
	   public boolean validates_Benefit_duration_for_Self_as_under_OOEDI(String bDuration) throws Throwable {
		   try
		   {
			   log.debug("Validates Wait Period for Self as under OOEDI");
			  String ActualAmnt=BeneDuration_OOEDISelf.getText().trim();
			  String Expected=bDuration.trim();
			   Assert.assertEquals(ActualAmnt, Expected,"Wait Period for Self does not match under OOEDI");
				log.info("Validated Wait Period for Self as under OOEDI sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to validate Wait Period for Self as under OOEDI|| Fail" + e.getMessage());
				throw (e);
			}
	   }
	   

	   public boolean selects_Benefit_Amount_for_Self_as_under_SDI(String bAmount) throws Throwable {
		   try
		   {
			   log.debug("Select Benefit Amount for Self as under SDI");
			   if (!beneAmount_SDI.isDisplayed()) {
					LongTermDisabilityPlusLabel.click();
					Thread.sleep(2000);
				}		
					reuseMethod.select_Benefit_Amount_slider(upArrow_Self_SDI, bAmount,beneAmount_SDI, downArrow_Self_SDI);
				log.info("Selected Benefit Amount for Self as under SDI sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select Benefit Amount for Self as as under SDI|| Fail" + e.getMessage());
				throw (e);
			}
	   }
	   
	   public boolean validates_under_SDI_the_Benefit_Slider_Range_for_Self(String Min, String Max)
				throws Exception {

			try {
				log.debug("Validate Benefit Slider Ranges for self for SDI Product");
				String MinAmt = minSliderLabel_SDISelf.getText();
				System.out.println("Actual Min Amount Self:" + MinAmt);
				if (MinAmt.equalsIgnoreCase(Min)) {
					System.out.println("Minimum Range for self for SDI is validated");
				}
				String MaxAmt = maxSliderLabel_SDISelf.getText();
				System.out.println("Actual Max Amount self:" + MaxAmt);

				if (MaxAmt.equalsIgnoreCase(Max)) {
					System.out.println("Maximum Range for self for SDI is validated");
				}
				log.info("Benefit Slider Ranges for self for SDI are validated sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to Validate Benefit Slider Ranges for SDI for self|| Fail"
						+ e.getMessage());
				throw (e);
			}
		}
	   
	   public boolean validates_Wait_Period_for_Self_as_under_SDI(String wPeriod) throws Throwable {
		   try
		   {
			   log.debug("Validates Wait Period for Self as under SDI");
			   List<WebElement> waitPeriod=reuseMethod.dropDowngetOption(waitPrd_SDISelf);
			   String expectedPeriod=wPeriod.trim();
			   for(WebElement e:waitPeriod)
			   {
			  String actualPeriod=e.getText().trim();
			  		  if(!actualPeriod.equalsIgnoreCase("Select"))
			  		  {
			  			  if(actualPeriod.equalsIgnoreCase(expectedPeriod))
			   System.out.println("Wait Period for Self matched under SDI");
			   }}
			   log.info("Validated Wait Period for Self as under SDI sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to validate Wait Period for Self as under SDI|| Fail" + e.getMessage());
				throw (e);
			}
	   }
	   
	
	   public boolean selects_Benefit_Duration_for_Self_as_under_SDI(String bDuration) throws Throwable {
	       
		   try
		   {
			   log.debug("Selects Benefit Duration for Self under SDI");
			   reuseMethod.dropDownselectbyvalue(beneDuration_SDISelf,bDuration);
			   log.info("Selects Benefit Duration for Self under SDI sucessfully || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select Benefit Duration for Self under SDI|| Fail" + e.getMessage());
				throw (e);
			}
	   }
	   
	// ************************END*******************

	   //WAEPA

		public boolean validates_that_the_Child_benefit_amount_for_Group_Term_Product_is_disabled_and_selected_as(String Cbenefit) throws Exception {

			try {
				log.debug("Child benefit amount for Group Term Product is disabled and Selected as" + Cbenefit);
				boolean Actual=BenefitAmount_Child_5YrProduct.isEnabled();
				Assert.assertFalse(Actual, "Child benefit amount for Group Term Product is enabled || Bug");
				String Actual_Value=BenefitAmount_Child_5YrProduct.getText();
				if (Actual_Value.equalsIgnoreCase(Cbenefit))
				{
					System.out.println("Expected value is getting selected as "+ Cbenefit);
				}
				log.info("Child benefit amount for Group Term Product is disabled || Pass");
				return true;
			} catch (Exception e) {
				log.error("Not able to select the benefit Amount for Child of Five Year Product || Fail" + e.getMessage());
				throw (e);
			}

		}
	public boolean	validate_message_for_spouse_displayed_in_blue_box_in_coverage_page() throws Throwable
	{
		try {
			log.debug("Validate Notification Messege on Coverage Page for spouse");
			String Expected=PropertyUtility.Load_MessageFile_Data("SpouseCoveragenotification");
			String msg1=CoveragenotificationMsgSpouse1.getText();
			String msg2=CoveragenotificationMsgSpouse2.getText();
			String Actualmsg=msg1+msg2;
			Actualmsg=Actualmsg.replaceAll("//s", "");
			Expected=Expected.replaceAll("//s", "");
			Actualmsg.trim();
			Expected.trim();
			System.err.println("Error Messege on Coverage Page==="+Actualmsg);
			Assert.assertEquals(Actualmsg, Expected,"Notification message on Coverage does not match");
			
			 
			log.info("Notification message for spouse on Coverage page validated successfully || Pass");
		    return true;
		}catch (Exception e) {
			log.error("Not able to Validate Notification Messege on coverage Page || Fail"+e.getMessage());
			 throw(e);
		}
	}
}

